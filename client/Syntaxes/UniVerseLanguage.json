{
   "Language": [
      {
         "Type": "UniVerse Basic",
         "Keywords": "!",
         "Icon": 1,
         "Index": 1,
         "Documentation": "Identifies a line as a comment line. Same as the !, $*, and REM statements.",
         "Detail": "! [commentText]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "#Include",
         "Icon": 14,
         "Index": 2,
         "Documentation": "Inserts and compiles UniVerse BASIC source code from another program into the program being compiled. Same as the $INCLUDE and INCLUDE statements.",
         "Detail": "#INCLUDE [filename] program\n#INCLUDE program FROM filename "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$* ",
         "Icon": 1,
         "Index": 3,
         "Documentation": "Identifies a line as a comment line. Same as the *, !, and REM statements.",
         "Detail": "$* [commentText]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Chain",
         "Icon": 14,
         "Index": 4,
         "Documentation": "Inserts and compiles UniVerse BASIC source code from another program into the program being compiled.",
         "Detail": "$CHAIN [filename] progam"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Copyright",
         "Icon": 14,
         "Index": 5,
         "Documentation": "Inserts comments into the object code header. (UniVerse supports this statement for compatibility with existing software.)",
         "Detail": "$COPYRIGHT \"copyright notice\""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Define",
         "Icon": 14,
         "Index": 6,
         "Documentation": "Defines a compile time symbol.",
         "Detail": "$DEFINE identifier [replacementText]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Eject",
         "Icon": 14,
         "Index": 7,
         "Documentation": "Begins a new page in the listing record. (UniVerse supports this statement for compatibility with existing software.) Same as the $PAGE statement.",
         "Detail": "$EJECT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Ifdef",
         "Icon": 14,
         "Index": 8,
         "Documentation": "Tests for the definition of a compile time symbol.",
         "Detail": "$IFDEF identifier\n   [statements]\n[[$ELSE]]\n   [statements]\n$ENDIF"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Ifndef",
         "Icon": 14,
         "Index": 9,
         "Documentation": "Tests for the definition of a compile time symbol.",
         "Detail": "$IFNDEF identifier\n   [statements]\n[[$ELSE]]\n   [statements]\n$ENDIF"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Include",
         "Icon": 14,
         "Index": 10,
         "Documentation": "The $INCLUDE\\$INSERT directive inserts the program/code snippet specified into the current source code. If the optional filename is specified the code is read from that file.",
         "Detail": "$INCLUDE [filename]  program\n$INCLUDE program FROM filename "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Insert",
         "Icon": 14,
         "Index": 12,
         "Documentation": "Performs the same operation as $INCLUDE; the only difference is in the syntax. (UniVerse supports this statement for compatibility with existing software.)",
         "Detail": "$INSERT [filename] program\n$INSERT program FROM filename "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Map",
         "Icon": 14,
         "Index": 13,
         "Documentation": "In NLS mode, specifies the map for the source code.",
         "Detail": "$MAP mapname"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Options",
         "Icon": 14,
         "Index": 14,
         "Documentation": "Sets compile time emulation of UniVerse flavors.",
         "Detail": "$OPTIONS [flavor] [optons]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Page",
         "Icon": 14,
         "Index": 15,
         "Documentation": "Begins a new page in the listing record. (UniVerse supports this statement for compatibility with existing software.) Same as the $EJECT statement.",
         "Detail": "$PAGE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "$Undefine",
         "Icon": 14,
         "Index": 16,
         "Documentation": "Removes the definition for a compile time symbol.",
         "Detail": "$UNDEFINE identifier"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "*",
         "Icon": 1,
         "Index": 17,
         "Documentation": "Identifies a line as a comment line. Same as the !, $*, and REM statements.",
         "Detail": "* [commentText]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@  ",
         "Icon": 3,
         "Index": 18,
         "Documentation": "Returns an escape sequence used for terminal control.",
         "Detail": "@( col[, row] )\n@(-code [,row] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Abort.Code",
         "Icon": 12,
         "Index": 19,
         "Documentation": "A numeric value indicating the type of condition that\ncaused the ON.ABORT paragraph to execute. The\nvalues are:\n1 � An ABORT statement was executed.\n2 � An abort was requested after pressing the Break\nkey followed by option A.\n3 � An internal or fatal error occurred.\n4 � An AUTO.LOGOUT event occurred.",
         "Detail": "@ABORT.CODE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Account",
         "Icon": 12,
         "Index": 20,
         "Documentation": "User login name. Same as @LOGNAME. Non-stacked.",
         "Detail": "@ACCOUNT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Am",
         "Icon": 21,
         "Index": 21,
         "Documentation": "Inserts an attribute mark CHAR(254)",
         "Detail": "@AM"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Ans ",
         "Icon": 12,
         "Index": 23,
         "Documentation": "Last I-type answer, value indeterminate.",
         "Detail": "@ANS variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Authorization ",
         "Icon": 12,
         "Index": 24,
         "Documentation": "Current effective user name.",
         "Detail": "@AUTHORIZATION variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Command ",
         "Icon": 12,
         "Index": 25,
         "Documentation": "Last command executed or entered at the UniVerse\nprompt.",
         "Detail": "@COMMAND"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Command.Stack ",
         "Icon": 12,
         "Index": 26,
         "Documentation": "Dynamic array containing the last 99 TCL commands\nexecuted.",
         "Detail": "@COMMAND.STACK"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Conv ",
         "Icon": 1,
         "Index": 27,
         "Documentation": "For future use.",
         "Detail": "@CONV variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Crthigh ",
         "Icon": 12,
         "Index": 28,
         "Documentation": "Number of lines on the terminal.",
         "Detail": "@CRTHIGH"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Crtwide ",
         "Icon": 12,
         "Index": 29,
         "Documentation": "Number of columns on the terminal.",
         "Detail": "@CRTWIDE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Data.Pending ",
         "Icon": 12,
         "Index": 30,
         "Documentation": "Dynamic array containing input generated by the\nDATA statement. Values in the dynamic array are\nseparated by field marks.",
         "Detail": "@DATA.PENDING"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Date ",
         "Icon": 12,
         "Index": 31,
         "Documentation": "Internal date when the program was invoked.",
         "Detail": "@DATE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Day ",
         "Icon": 12,
         "Index": 32,
         "Documentation": "Day of month from @DATE.",
         "Detail": "@DAY"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Dict ",
         "Icon": 12,
         "Index": 33,
         "Documentation": "For future use.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@False ",
         "Icon": 12,
         "Index": 34,
         "Documentation": "Compiler replaces the value with 0.",
         "Detail": "@FALSE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@File.Name ",
         "Icon": 12,
         "Index": 35,
         "Documentation": "Current file name. When used in a virtual field index,\n@FILENAME reflects the current file name being used\nin a RetrieVe or UniVerse SQL statement.\nSame as @FILENAME.",
         "Detail": "@FILE.NAME"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Filename ",
         "Icon": 12,
         "Index": 36,
         "Documentation": "Current file name. When used in a virtual field index,\n@FILENAME reflects the current file name being used\nin a RetrieVe or UniVerse SQL statement.\nSame as @FILE.NAME.",
         "Detail": "@FILENAME"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Fm ",
         "Icon": 12,
         "Index": 37,
         "Documentation": "Field mark: CHAR(254). Same as @AM.",
         "Detail": "@FM"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Format ",
         "Icon": 12,
         "Index": 38,
         "Documentation": "For future use.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Hdbc ",
         "Icon": 12,
         "Index": 39,
         "Documentation": "ODBC connection environment on the local UniVerse\nserver. Non-stacked.",
         "Detail": "@HDBC"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Header ",
         "Icon": 12,
         "Index": 40,
         "Documentation": "For future use.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Henv ",
         "Icon": 12,
         "Index": 41,
         "Documentation": "ODBC environment on the local UniVerse server. Non\nstacked.",
         "Detail": "@HENV"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Hstmt ",
         "Icon": 12,
         "Index": 42,
         "Documentation": "ODBC statement environment on the local UniVerse\nserver. Non-stacked.",
         "Detail": "@HSTMT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Id ",
         "Icon": 12,
         "Index": 43,
         "Documentation": "Current record ID.",
         "Detail": "@ID variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Idx.Filepath ",
         "Icon": 12,
         "Index": 44,
         "Documentation": "Can be used within an indexed subroutine. Contains the full path of the UniVerse file being updated that caused the indexed subroutine to fire.",
         "Detail": "@IDX.FILEPATH"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Idx.Iotype ",
         "Icon": 12,
         "Index": 45,
         "Documentation": "Specifies the type of operation being performed. Can\nbe integrated in the indexed subroutine to determine\nthey type of database operation that caused the\nindexed subroutine to fire.\nThe following values are associated with the\n@IDX.IOTYPE:\n0 - The value returned when @IDX.IOTYPE is used\noutside the context of an indexed subroutine.\n1 - The value returned when the SUBR is called\nbecause an INSERT operation is performed.\n2 - The value returned when the SUBR is called\nbecause a DELETE operation is performed.\n3 - The value returned when the SUBR is called\nbecause an UPDATE operation is used to evaluate the\noriginal value operation.\n4 - The value returned when a SUBR i called because\nan UPDATE operation is used to evaluate the new\nvalue operation.",
         "Detail": "@IDX.IOTYPE variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Im ",
         "Icon": 12,
         "Index": 46,
         "Documentation": "Item mark: CHAR(255).",
         "Detail": "@IM variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Isolation ",
         "Icon": 12,
         "Index": 47,
         "Documentation": "Current transaction isolation level for the active\ntransaction or the current default isolation level if no\ntransaction exists.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Level ",
         "Icon": 12,
         "Index": 48,
         "Documentation": "Nesting level of execution statements. Non-stacked.",
         "Detail": "@LEVEL"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Logname ",
         "Icon": 12,
         "Index": 49,
         "Documentation": "User login name. Same as @ACCOUNT.",
         "Detail": "@LOGNAME"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Lptrhigh",
         "Icon": 12,
         "Index": 50,
         "Documentation": "Number of lines on the device to which you are\nprinting (that is, terminal or printer).",
         "Detail": "@LPTRHIGH "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Lptrwide G49",
         "Icon": 12,
         "Index": 51,
         "Documentation": "Number of columns on the device to which you are\nprinting (that is, terminal or printer).",
         "Detail": "@LPTRWIDE "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Month ",
         "Icon": 12,
         "Index": 52,
         "Documentation": "Current month.",
         "Detail": "@MONTH "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Mv ",
         "Icon": 12,
         "Index": 53,
         "Documentation": "Current value counter for columnar listing only. Used\nonly in I-descriptors. Same as @NV.",
         "Detail": "@MV"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Nb ",
         "Icon": 12,
         "Index": 54,
         "Documentation": "Current BREAK level number. 1 is the lowest-level\nbreak. @NB has a value of 255 on the grand total line.\nUsed only in I-descriptors.",
         "Detail": "@NB"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Nd ",
         "Icon": 12,
         "Index": 55,
         "Documentation": "Number of detail lines since the last BREAK on a break\nline. Used only in I-descriptors.",
         "Detail": "@ND"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Ni ",
         "Icon": 12,
         "Index": 56,
         "Documentation": "Current item counter (the number of items listed\nor selected). Used only in I-descriptors. Same as\n@RECCOUNT.",
         "Detail": "@NI"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Ns ",
         "Icon": 12,
         "Index": 57,
         "Documentation": "Current subvalue counter for columnar listing only.\nUsed only in I-descriptors.",
         "Detail": "@NS"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Null ",
         "Icon": 12,
         "Index": 58,
         "Documentation": "The null value. Non-stacked.",
         "Detail": "@NULL"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Nulls.Str ",
         "Icon": 12,
         "Index": 59,
         "Documentation": "Internal representation of the null value, which is\nCHAR(128). Non-stacked.",
         "Detail": "@NULL.STR"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Nv ",
         "Icon": 12,
         "Index": 60,
         "Documentation": "Current value counter for columnar listing only. Used\nonly in I-descriptors. Same as @MV.",
         "Detail": "@NV"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Option ",
         "Icon": 12,
         "Index": 61,
         "Documentation": "Value of field 5 in the VOC for the calling verb.",
         "Detail": "@OPTION"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Parasentence",
         "Icon": 12,
         "Index": 62,
         "Documentation": "Last sentence or paragraph that invoked the current\nprocess.",
         "Detail": "@PARASENTENCE "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Path ",
         "Icon": 12,
         "Index": 63,
         "Documentation": "Pathname of the current account.",
         "Detail": "@PATH"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Reccount ",
         "Icon": 12,
         "Index": 64,
         "Documentation": "Current item counter (the number of items listed or\nselected). Used only in I-descriptors. Same as @NI.",
         "Detail": "@RECCOUNT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Record ",
         "Icon": 12,
         "Index": 65,
         "Documentation": "Entire current record.",
         "Detail": "@RECORD"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Recur0 ",
         "Icon": 1,
         "Index": 66,
         "Documentation": "Reserved.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Recur1 ",
         "Icon": 1,
         "Index": 67,
         "Documentation": "Reserved.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Recur2 ",
         "Icon": 1,
         "Index": 68,
         "Documentation": "Reserved.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Recur3 ",
         "Icon": 1,
         "Index": 69,
         "Documentation": "Reserved.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Recur4 ",
         "Icon": 1,
         "Index": 70,
         "Documentation": "Reserved.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Schema ",
         "Icon": 12,
         "Index": 71,
         "Documentation": "Schema name of the current UniVerse account. Non\nstacked. When users create a new schema, @SCHEMA\nis not set until the next time they log in to UniVerse.",
         "Detail": "@SCHEMA"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Selected ",
         "Icon": 21,
         "Index": 72,
         "Documentation": "Number of elements selected from the last select list.\nNon-stacked.",
         "Detail": "@SELECTED"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Sentence ",
         "Icon": 12,
         "Index": 73,
         "Documentation": "Sentence that invoked the current BASIC program.\nAny EXECUTE statement updates @SENTENCE.",
         "Detail": "@SENTENCE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Sm ",
         "Icon": 21,
         "Index": 74,
         "Documentation": "Subvalue mark: CHAR(252). Same as @SVM.",
         "Detail": "@SM"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQL.Code ",
         "Icon": 1,
         "Index": 75,
         "Documentation": "For future use.",
         "Detail": "@SQL.CODE variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQL.Date ",
         "Icon": 12,
         "Index": 76,
         "Documentation": "Current system date. Use in trigger programs. Non\nstacked.",
         "Detail": "@SQL.DATE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQL.Error ",
         "Icon": 1,
         "Index": 77,
         "Documentation": "For future use.",
         "Detail": "@SQL.ERROR variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQL.State ",
         "Icon": 1,
         "Index": 78,
         "Documentation": "For future use.",
         "Detail": "@SQL.STATE variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQL.Time ",
         "Icon": 12,
         "Index": 79,
         "Documentation": "Current system time. Use in trigger programs. Non\nstacked.",
         "Detail": "@SQL.TIME"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQL.Warning ",
         "Icon": 1,
         "Index": 80,
         "Documentation": "For future use.",
         "Detail": "@SQL.WARNING variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQLProc.Name ",
         "Icon": 12,
         "Index": 81,
         "Documentation": "Name of the current SQL procedure.",
         "Detail": "@SQLPROC.NAME"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@SQLProc.Tx.Level",
         "Icon": 12,
         "Index": 82,
         "Documentation": "Transaction level at which the current SQL procedure\nbegan.",
         "Detail": "@SQLPROC.TX.LEVEL"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Stdfil ",
         "Icon": 12,
         "Index": 83,
         "Documentation": "Default file variable.",
         "Detail": "@STDFIL variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Svm",
         "Icon": 21,
         "Index": 84,
         "Documentation": "Inserts a subvalue mark CHAR(252)",
         "Detail": "@SVM"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@System.Return.Code",
         "Icon": 12,
         "Index": 86,
         "Documentation": "Status codes returned by system processes. Same as\n@SYSTEM.SET.",
         "Detail": "@SYSTEM.RETURN.CODE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@System.Set ",
         "Icon": 12,
         "Index": 87,
         "Documentation": "Status codes returned by system processes. Same as\n@SYSTEM.RETURN.CODE.",
         "Detail": "@SYSTEM.SET"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Term.Type ",
         "Icon": 12,
         "Index": 88,
         "Documentation": "Terminal type. Non-stacked.",
         "Detail": "@TERM.TYPE variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Time ",
         "Icon": 12,
         "Index": 89,
         "Documentation": "Internal time when the program was invoked.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Tm ",
         "Icon": 21,
         "Index": 90,
         "Documentation": "Inserts a text mark CHAR(251)",
         "Detail": "@TM"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Transaction ",
         "Icon": 12,
         "Index": 92,
         "Documentation": "A numeric value. Any nonzero value indicates that\na transaction is active; the value 0 indicates that no\ntransaction exists.",
         "Detail": "@TRANSACTION"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Transaction.ID ",
         "Icon": 12,
         "Index": 93,
         "Documentation": "Transaction number of the active transaction. An\nempty string indicates that no transaction exists.",
         "Detail": "@TRANSACTION.ID"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Transaction.Level",
         "Icon": 12,
         "Index": 94,
         "Documentation": "Transaction nesting level of the active transaction. A 0\nindicates that no transaction exists.",
         "Detail": "@TRANSACTION.LEVEL"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@True ",
         "Icon": 21,
         "Index": 95,
         "Documentation": "Compiler replaces the value with 1.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Tty ",
         "Icon": 21,
         "Index": 96,
         "Documentation": "Terminal device name. If the process is a phantom,\n@TTY returns the value �phantom�. If the process is a\nUniVerse API, it returns �uvcs�.\nNote: In PI/Open flavor, @TTY returns an empty string\nfor PHANTOM processes.",
         "Detail": "@TTY"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User.No ",
         "Icon": 21,
         "Index": 97,
         "Documentation": "User number. Non-stacked. Same as @USERNO.",
         "Detail": "@USER.NO"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User.Return.Code",
         "Icon": 12,
         "Index": 98,
         "Documentation": "Status codes created by the user.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User0",
         "Icon": 12,
         "Index": 99,
         "Documentation": "User-defined.",
         "Detail": "@USER0 variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User1 ",
         "Icon": 12,
         "Index": 100,
         "Documentation": "User-defined.",
         "Detail": "@USER1 variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User2",
         "Icon": 12,
         "Index": 101,
         "Documentation": "User-defined.",
         "Detail": "@USER2 variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User3 ",
         "Icon": 12,
         "Index": 102,
         "Documentation": "User-defined.",
         "Detail": "@USER3 variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@User4 ",
         "Icon": 12,
         "Index": 103,
         "Documentation": "User-defined.",
         "Detail": "@USER4 variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Userno ",
         "Icon": 12,
         "Index": 104,
         "Documentation": "User number. Non-stacked. Same as @USER.NO.",
         "Detail": "@USERNO"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Vm ",
         "Icon": 21,
         "Index": 105,
         "Documentation": "Inserts a value mark CHAR(253)",
         "Detail": "@VM"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Who ",
         "Icon": 21,
         "Index": 107,
         "Documentation": "Name of the current UniVerse account directory. Non\nstacked.",
         "Detail": "@WHO"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Year ",
         "Icon": 21,
         "Index": 108,
         "Documentation": "Current year (2 digits).",
         "Detail": "@YEAR variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "@Year4 ",
         "Icon": 21,
         "Index": 109,
         "Documentation": "Current year (4 digits).",
         "Detail": "@YEAR4 variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Abort",
         "Icon": 14,
         "Index": 110,
         "Documentation": "Terminates all programs and returns to the UniVerse command level.",
         "Detail": "ABORT [expression �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Aborte",
         "Icon": 14,
         "Index": 111,
         "Documentation": "Terminates all programs and returns to the UniVerse command level. Behaves as if $OPTIONS STOP.MSG were in force.",
         "Detail": "ABORTE [expression �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Abortm",
         "Icon": 14,
         "Index": 112,
         "Documentation": "Terminates all programs and returns to the UniVerse command level. Behaves as if $OPTIONS-STOP.MSG were in force.",
         "Detail": "ABORTM [expression �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Abs",
         "Icon": 3,
         "Index": 113,
         "Documentation": "The ABS function will return the mathematical absolute of the ()expression.",
         "Detail": "ABS( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Abss",
         "Icon": 3,
         "Index": 115,
         "Documentation": "Creates a dynamic array containing the absolute values of a dynamic array.",
         "Detail": "ABSS( dynamicarray )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "acceptConnection  ",
         "Icon": 3,
         "Index": 116,
         "Documentation": "Accepts an incoming connection attempt on the server side\nsocket.",
         "Detail": "acceptConnection(svr_socket, blocking_mode, timeout, in_addr, in_name,\nacceptConnection(svr_socket, blocking_mode, timeout, in_addr, in_name,socket_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Acos",
         "Icon": 3,
         "Index": 117,
         "Documentation": "Calculates the trigonometric arc-cosine of an expression.",
         "Detail": "ACOS( expression ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Activatekey",
         "Icon": 14,
         "Index": 118,
         "Documentation": "Activates a key. ",
         "Detail": "ACTIVATEKEY <key.id>, <password> [ON <hostname>]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "addAuthenticationRule\n",
         "Icon": 3,
         "Index": 119,
         "Documentation": "Adds an authentication rule to a security context. UniVerse uses\nthe authentication rules during SSL negotiation to determine\nwhether or not the peer is to be trusted.",
         "Detail": "addAuthenticationRule(context, ServerOrClient, Rule, RuleString)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "addCertificate  ",
         "Icon": 3,
         "Index": 120,
         "Documentation": "Loads a certificate (or multiple certificates) into a security\ncontext to be used as a UniVerse server or client certificate.\nAlternatively, it can specify a directory which contains the\ncertificates that are either used as CA (Certificate Authority)\ncertificates to authenticate incoming certificates, or act as a\nRevocation list to check against expired or revoked certificates.",
         "Detail": "addCertificate(certPath, usedAs, format, algorithm, context, p12pass)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "addRequestParameter\n",
         "Icon": 3,
         "Index": 121,
         "Documentation": "Adds a parameter to the request.",
         "Detail": "addRequestParameter(request_handle, parameter_name, parameter_value,�content_handling)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Adds",
         "Icon": 3,
         "Index": 122,
         "Documentation": "Adds elements of two dynamic arrays.",
         "Detail": "ADDS( array1, array2 ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Alpha",
         "Icon": 3,
         "Index": 123,
         "Documentation": "Determines whether the expression is an alphabetic or nonalphabetic\nstring.",
         "Detail": "ALPHA( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amInitialize\n",
         "Icon": 3,
         "Index": 124,
         "Documentation": "Creates and opens an AMI session.",
         "Detail": "amInitialize(hSession, appName, policyName, reasonCode)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amReceiveMsg",
         "Icon": 3,
         "Index": 125,
         "Documentation": "Receives a message sent by the amSendMsg function.",
         "Detail": "amReceiveMsg(hSession, receiverName, policyName, selMsgName, maxMsgLen, dataLen, data, rcvMsgName, reasonCode[,recMsgOption])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amReceiveRequest\n",
         "Icon": 3,
         "Index": 126,
         "Documentation": "Receives a request message.",
         "Detail": "amReceiveRequest(hSession, receiverName, policyName, maxMsgLen, dataLen, data, rcvMsgName, senderName, reasonCode [,recReqOption])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amSendMsg",
         "Icon": 3,
         "Index": 127,
         "Documentation": "Sends a datagram (send and forget) message",
         "Detail": "amSendMsg(hSession, senderName, policyName, data, sndMsgName, reasonCode)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amSendRequest\n",
         "Icon": 3,
         "Index": 128,
         "Documentation": "Sends a request message.",
         "Detail": "amSendRequest(hSession, senderName, policyName, responseName, data, sndMsgName, reasonCode)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amSendResponse\n",
         "Icon": 3,
         "Index": 129,
         "Documentation": "Sends a request message.",
         "Detail": "amSendResponse(hSession, senderName, policyName, rcvMsgName, data sndMsgName, reasonCode)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "amTerminate\n",
         "Icon": 3,
         "Index": 130,
         "Documentation": "Closes a session.",
         "Detail": "amTerminate(hSession, policyName, reasonCode)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "analyzeCertificate",
         "Icon": 3,
         "Index": 131,
         "Documentation": "Decodes a certificate and inputs plain text into the result\nparameter. The result parameter then contains such\ninformation as the subject name, location, institute, issuer,\npublic key, other extensions and the issuer�s signature.",
         "Detail": "analyzeCertificate(cert, format, result, p12pass)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ands",
         "Icon": 3,
         "Index": 132,
         "Documentation": "Performs a logical AND on elements of two dynamic arrays.",
         "Detail": "ANDS( array1, array2 )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "ASCII",
         "Icon": 3,
         "Index": 133,
         "Documentation": "Converts EBCDIC representation of character string data to the equivalent ASCII\ncharacter code values.",
         "Detail": "ASCII( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Asin",
         "Icon": 3,
         "Index": 134,
         "Documentation": "Calculates the trigonometric arc-sine of an expression.",
         "Detail": "ASIN( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Assigned",
         "Icon": 3,
         "Index": 135,
         "Documentation": "Determines if a variable is assigned a value.",
         "Detail": "ASSIGNED( variable ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Atan",
         "Icon": 3,
         "Index": 136,
         "Documentation": "Calculates the trigonometric arctangent of an expression.",
         "Detail": "ATAN( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "AuditLog",
         "Icon": 3,
         "Index": 137,
         "Documentation": "Create application driven audit logs.",
         "Detail": "AuditLog(Originator, Action, File, Record, Info, Status, [OldData], [NewData])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Authorization\n",
         "Icon": 14,
         "Index": 138,
         "Documentation": "Specifies the effective run-time UID (user identification) number of the program.",
         "Detail": "AUTHORIZATION \"username\"\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Auxmap",
         "Icon": 14,
         "Index": 139,
         "Documentation": "Assigns the map for the auxiliary printer to print unit 0 (for example, the terminal).",
         "Detail": "AUXMAP { ON|OFF|expression }\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Begin Case",
         "Icon": 14,
         "Index": 140,
         "Documentation": "The CASE structure is bounded by the BEGIN CASE and END CASE statements.",
         "Detail": "BEGIN CASE\n...\nEND CASE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Begin transaction\n",
         "Icon": 14,
         "Index": 142,
         "Documentation": "Indicates the beginning of a set of statements that make up a single transaction.",
         "Detail": "BEGIN TRANSACTION [ISOLATION LEVEL level]\n[statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bitand",
         "Icon": 3,
         "Index": 143,
         "Documentation": "Performs a bitwise AND of two integers.",
         "Detail": "BITAND( expression1, expression2 )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bitnot",
         "Icon": 3,
         "Index": 144,
         "Documentation": "Performs a bitwise NOT of two integers.",
         "Detail": "BITNOT( expression [, bit#] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bitor",
         "Icon": 3,
         "Index": 145,
         "Documentation": "Performs a bitwise OR of two integers.",
         "Detail": "BITOR( expression1, expression2 ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bitreset\n",
         "Icon": 3,
         "Index": 146,
         "Documentation": "Resets one bit of an integer.",
         "Detail": "BITRESET( expression, bit# )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bitset",
         "Icon": 3,
         "Index": 147,
         "Documentation": "Sets one bit of an integer.",
         "Detail": "BITSET( expression, bit# )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bittest\n",
         "Icon": 3,
         "Index": 148,
         "Documentation": "Tests one bit of an integer.",
         "Detail": "BITTEST( expression, bit# )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bitxor",
         "Icon": 3,
         "Index": 149,
         "Documentation": "Performs a bitwise XOR of two integers.",
         "Detail": "BITXOR( expression1, expression2 ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Break",
         "Icon": 14,
         "Index": 150,
         "Documentation": "Enables or disables the Break key on the keyboard.",
         "Detail": "BREAK [KEY] { ON|OFF|expression }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bscan",
         "Icon": 14,
         "Index": 151,
         "Documentation": "Scans the leaf-nodes of a B-tree file (type 25) or a secondary index.",
         "Detail": "BSCAN ID.variable [, rec.variable] [FROM file.variable [, record]] [USING indexname] [RESET] [BY seq] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Byte",
         "Icon": 3,
         "Index": 152,
         "Documentation": "Generates a string made up of a single byte.",
         "Detail": "BYTE( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bytelen",
         "Icon": 3,
         "Index": 153,
         "Documentation": "Generates the number of bytes contained in the string value in an expression.",
         "Detail": "BYTELEN( expression ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Bytetype",
         "Icon": 3,
         "Index": 154,
         "Documentation": "Determines the function of a byte in a character.",
         "Detail": "BYTETYPE( value )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Byteval",
         "Icon": 3,
         "Index": 155,
         "Documentation": "Retrieves the value of a byte in a string value in an expression.",
         "Detail": "BYTEVAL( expression ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Call",
         "Icon": 3,
         "Index": 156,
         "Documentation": "The CALL statement transfers program execution to an external subroutine.",
         "Detail": "CALL NAME [ ) [MAT] argument [, [MAT] argument ...] ) ]\nCALL [@]subroutine.name [(argument [, argument ... ])]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Case",
         "Icon": 3,
         "Index": 158,
         "Documentation": "The CASE statement allows the programmer to execute a particular sequence of instructions based upon the results of a series of test expressions.",
         "Detail": "BEGIN CASE\nCASE expression\nstatement(s)\nCASE expression\nstatement(s)\n.....\nEND CASE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Cats",
         "Icon": 3,
         "Index": 160,
         "Documentation": "Concatenates elements of two dynamic arrays.",
         "Detail": "CATS( array1, array2 )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Century.Pivot\n",
         "Icon": 3,
         "Index": 161,
         "Documentation": "Use the CENTURY.PIVOT function to override the system-wide century pivot year defined in the uvconfig file.",
         "Detail": "CENTURY.PIVOT( year|nn )\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Chain",
         "Icon": 14,
         "Index": 162,
         "Documentation": "Terminates a BASIC program and executes a UniVerse command.",
         "Detail": "CHAIN command"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Change",
         "Icon": 3,
         "Index": 164,
         "Documentation": "The CHANGE function operates on a variable and replaces all occurrences of one string with another.",
         "Detail": "CHANGE (expression, substring, replacement [,occurrence [,begin]] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Char",
         "Icon": 3,
         "Index": 166,
         "Documentation": "The CHAR function returns the  ASCII character specified by the expression.",
         "Detail": "CHAR( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Chars",
         "Icon": 3,
         "Index": 168,
         "Documentation": "Converts numeric elements of a dynamic array to their ASCII character string\nequivalents.",
         "Detail": "CHARS( dynamic.array )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Checksum",
         "Icon": 3,
         "Index": 169,
         "Documentation": "Returns a cyclical redundancy code (a checksum value).",
         "Detail": "CHECKSUM( string ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Clear",
         "Icon": 14,
         "Index": 170,
         "Documentation": "Assigns a value of 0 to specified variables.",
         "Detail": "CLEAR [ COMMON ]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Clearcommon",
         "Icon": 14,
         "Index": 171,
         "Documentation": "Set all variables in a named common area to zero.",
         "Detail": "CLEARCOMMON [/common.labe/]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Cleardata",
         "Icon": 14,
         "Index": 172,
         "Documentation": "Clears all data previously stored by the DATA statement.",
         "Detail": "CLEARDATA"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Clearfile\n",
         "Icon": 14,
         "Index": 173,
         "Documentation": "Erases all records from a file.",
         "Detail": "CLEARFILE [file.variable] [ON ERROR statements] [LOCKED statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Clearprompts\n",
         "Icon": 14,
         "Index": 174,
         "Documentation": "Clears the value of the in-line prompt.",
         "Detail": "CLEARPROMPTS"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Clearselect\n",
         "Icon": 14,
         "Index": 175,
         "Documentation": "Sets a select list to empty.",
         "Detail": "CLEARSELECT [ALL | list.number]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Close",
         "Icon": 14,
         "Index": 176,
         "Documentation": "Writes data written to the file physically on the disk and releases any file or update locks.",
         "Detail": "CLOSE [file.variable] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Closeseq",
         "Icon": 14,
         "Index": 177,
         "Documentation": "Writes an end-of-file mark at the current location in the record and then makes the record available to other users.",
         "Detail": "CLOSESEQ file.variable [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "closeSocket  ",
         "Icon": 3,
         "Index": 178,
         "Documentation": "Closes a socket connection.",
         "Detail": "closeSocket(socket_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "CloseXMLData\n",
         "Icon": 3,
         "Index": 179,
         "Documentation": "After you finish using an XML document, use CloseXMLData to close the dynamic array variable.",
         "Detail": "Status=CloseXMLData(xml_data_handle)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Col1",
         "Icon": 3,
         "Index": 180,
         "Documentation": "Returns the column position immediately preceding the selected substring after a BASIC FIELD function is executed.",
         "Detail": "COL1()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Col2",
         "Icon": 3,
         "Index": 181,
         "Documentation": "Returns the column position immediately following the selected substring after a BASIC FIELD function is executed.",
         "Detail": "COL2()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Command.Editor",
         "Icon": 14,
         "Index": 182,
         "Documentation": "Enables or disables the command editor in PI/Open.",
         "Detail": "COMMAND.EDITOR [{ON | OFF} [INSERT | OVERLAY] [VERBS | ALL] �prompt�}]\nCOMMAND.EDITOR [OFF]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Commit\n",
         "Icon": 14,
         "Index": 183,
         "Documentation": "Commits all changes made during a transaction, writing them to disk.",
         "Detail": "COMMIT [WORK] [THEN statements] [ELSE statements ]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Common",
         "Icon": 14,
         "Index": 184,
         "Documentation": "The COMMON statement declares a list of variables and matrices that can be shared among various programs. There can be many common areas including a default, unnamed common area.",
         "Detail": "COMMON [/CommonName/] variable[, variable ... ]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Compare",
         "Icon": 3,
         "Index": 186,
         "Documentation": "Compares two strings for sorting.",
         "Detail": "COMPARE (string1, string2 [, justification])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Continue",
         "Icon": 14,
         "Index": 187,
         "Documentation": "The CONTINUE statement is the complimentary statement to the BREAK statement without arguments. The statement is used within a loop to skip the remaining code in the current iteration and proceed directly to the next iteration.",
         "Detail": "CONTINUE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Convert",
         "Icon": 14,
         "Index": 189,
         "Documentation": "The CONVERT statement converts one or more characters (searchString) in a string to their corresponding replacementString characters.",
         "Detail": "CONVERT searchString TO replacementString IN string"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Convert",
         "Icon": 3,
         "Index": 191,
         "Documentation": "Replaces every occurrence of specified characters in a variable with other specified characters.",
         "Detail": "CONVERT (searchString, replacementString, string )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "COSH  ",
         "Icon": 3,
         "Index": 192,
         "Documentation": "Calculates the trigonometric cosine of an angle.",
         "Detail": "COS( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "COSH  ",
         "Icon": 3,
         "Index": 193,
         "Documentation": "Calculates the hyperbolic cosine of an expression.",
         "Detail": "COSH( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Count ",
         "Icon": 3,
         "Index": 194,
         "Documentation": "Evaluates the number of times a substring is repeated in a string.",
         "Detail": "COUNT ( string, substring )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Counts",
         "Icon": 3,
         "Index": 195,
         "Documentation": "Evaluates the number of times a substring is repeated in each element of a dynamic array.",
         "Detail": "COUNTS (dynamic.array, substring)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Create",
         "Icon": 14,
         "Index": 196,
         "Documentation": "Creates a record in a UniVerse type 1 or type 19 file or establishes a path.",
         "Detail": "CREATE file.variable {THEN statements [ELSE statements] | ELSE�statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "createCertification\n",
         "Icon": 3,
         "Index": 197,
         "Documentation": "Generates a certificate. The certificate can either be a self\nsigned certificate as a root CA that can then be used later to\nsign other certificates, or it can be a CA signed certificate. The\ngenerated certificate conforms to X509V3 standard.",
         "Detail": "createCertificate(action, req, signKey, keyPass, CAcert, days, extensions, certOut, signAlg)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "createCertRequest  ",
         "Icon": 3,
         "Index": 198,
         "Documentation": "Generates a PKCS #10 certificate request from a private\nkey in PKCS #8 form and a set of user specified data. The\nrequest can be sent to a CA or used as a parameter to the\ncreateCertificate() function to obtain an X.509 public key\ncertificate.",
         "Detail": "createCertRequest(key, inFormat, keyLoc, algorithm, digest, passPhrase,�subjectData, outFile, outFormat)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "createRequest  ",
         "Icon": 3,
         "Index": 199,
         "Documentation": "Creates an HTTP request and returns a handle to the request.",
         "Detail": "createRequest(URL, http_method, request_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "createSecureRequest\n",
         "Icon": 3,
         "Index": 200,
         "Documentation": "Behaves exactly the same as the createRequest() function,\nexcept for the fourth parameter, a handle to a security context,\nwhich is used to associate the security context with the request.",
         "Detail": "createSecureRequest(URL, http_method, request_handle, security_context)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "createSecurityContext\n",
         "Icon": 3,
         "Index": 201,
         "Documentation": "Creates a security context and returns a handle to the context.",
         "Detail": "createSecurityContext(context, �protocol version:[rule],...�)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Crt",
         "Icon": 14,
         "Index": 202,
         "Documentation": "The CRT statement sends data directly to the terminal, even if a PRINTER ON statement is currently active. If the optional ':' is appended, no carriage return is appended to the text",
         "Detail": "CRT | DISPLAY expression [, expression..] [:]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Data",
         "Icon": 14,
         "Index": 204,
         "Documentation": "Stores values to be used in subsequent requests for data input.",
         "Detail": "DATA expression [,expression �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Date",
         "Icon": 3,
         "Index": 205,
         "Documentation": "The DATE( ) function returns the date in internal system form. This date is expressed as the number of days since (or before) December 31, 1967.",
         "Detail": "DATE()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "DBtoXML",
         "Icon": 3,
         "Index": 207,
         "Documentation": "Create an XML document from UniVerse data using UniVerse BASIC.",
         "Detail": "DBTOXML(xml_document, doc_location, u2xmap_file, u2xmap_location,�condition, status)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Dcount",
         "Icon": 3,
         "Index": 208,
         "Documentation": "The DCOUNT() function counts the number of field elements in a string that are separated by a specified delimiter.",
         "Detail": "DCOUNT( string, delimiter )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Deactivatekey",
         "Icon": 14,
         "Index": 210,
         "Documentation": "Deactivate one or mor encryption keys.",
         "Detail": "DEACTIVATEKEY <key.id>, <password> [ON <hostname>]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Debug",
         "Icon": 14,
         "Index": 211,
         "Documentation": "The DEBUG statement causes the executing program to enter the UniVerse debugger.",
         "Detail": "DEBUG"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Deffun",
         "Icon": 3,
         "Index": 213,
         "Documentation": "Defines a user-written function.",
         "Detail": "DEFFUN function [([MAT] argument [, [MAT] argument �] )] [CALLING call.ID] "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Del",
         "Icon": 14,
         "Index": 214,
         "Documentation": "Deletes the specified field, value, or subvalue from a dynamic array.",
         "Detail": "DEL dynamic.array < field# [,value# [,subvalue#]] >"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Delete",
         "Icon": 3,
         "Index": 215,
         "Documentation": "The DEL or DELETE statement is used to remove a specified element from a dynamic array.",
         "Detail": "DEL variable<expression1[, expression2[, expression3]]>\nDELETE(variable,expression1[, expression2[, expression3])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Delete",
         "Icon": 14,
         "Index": 216,
         "Documentation": "The DELETE statement is used to delete a record from a UniVerse file.",
         "Detail": "DELETE [variable,] expression [SETTING setvar] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Deletelist",
         "Icon": 14,
         "Index": 219,
         "Documentation": "Deletes a select list saved in the &SAVEDLISTS& file.",
         "Detail": "DELETELIST listname"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Deleteu\n",
         "Icon": 14,
         "Index": 220,
         "Documentation": "Deletes a record from a previously opened file without releasing the update lock.",
         "Detail": "DELETEU [file.variable ,] record.ID [ON ERROR statements]\n[LOCKED statements]\n[THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Descrinfo",
         "Icon": 3,
         "Index": 221,
         "Documentation": "Returns requested information (key) about a variable.",
         "Detail": "DESCRINFO(key, variable)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Digest",
         "Icon": 3,
         "Index": 222,
         "Documentation": "Generates a message digest of supplied data. A message digest is the result of a one-way hash function (digest algorithm) performed on the message.",
         "Detail": "DIGEST(algorithm, data, dataLoc, result)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Dim",
         "Icon": 3,
         "Index": 223,
         "Documentation": "The DIM statement is used to declare arrays to the compiler before they are referenced.",
         "Detail": "DIM[ENSION] variable(number[, number... ])[, variable(number [,number...]) ...]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Dimension",
         "Icon": 3,
         "Index": 224,
         "Documentation": "Declares the name, dimensionality, and size constraints of an array variable.",
         "Detail": "DIM[ENSION] matrix (rows, columns) [, matrix (rows, columns) �]\nDIM[ENSION] vector (subscript) [, vector (subscript) �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Disabledec",
         "Icon": 14,
         "Index": 225,
         "Documentation": "Turn off decryption on field or fields specified.",
         "Detail": "DISABLEDEC <filename> [, <multilevel-filename>], {ALL |<field_list>}�[ON ERROR <statements>]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Display",
         "Icon": 14,
         "Index": 226,
         "Documentation": "Outputs data to the screen.",
         "Detail": "DISPLAY string"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Div ",
         "Icon": 3,
         "Index": 227,
         "Documentation": "Outputs the whole part of the real division of two real numbers.",
         "Detail": "DIV( dividend, divisor )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Divs",
         "Icon": 3,
         "Index": 228,
         "Documentation": "Divides elements of two dynamic arrays.",
         "Detail": "DIVS( dynArray1, dynArray2 )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Downcase",
         "Icon": 3,
         "Index": 229,
         "Documentation": "DOWNCASE converts all uppercase characters in an expression to lowercase characters.",
         "Detail": "DOWNCASE( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Dquote",
         "Icon": 3,
         "Index": 231,
         "Documentation": "The function will put double quotation mark at the beginning and end of a string",
         "Detail": "DQUOTE(Expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Dtx",
         "Icon": 3,
         "Index": 233,
         "Documentation": "Converts a decimal integer into its hexadecimal equivalent.",
         "Detail": "DTX(number [,size] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "EBCDIC",
         "Icon": 3,
         "Index": 234,
         "Documentation": "Converts data from its ASCII representation to the equivalent code value in\nEBCDIC.",
         "Detail": "EBCDIC( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Echo",
         "Icon": 14,
         "Index": 235,
         "Documentation": "Controls the display of input characters on the terminal screen.",
         "Detail": "ECHO {ON | OFF | expression}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Enabledec",
         "Icon": 14,
         "Index": 236,
         "Documentation": "Activate decryption on a file or fields specified.",
         "Detail": "ENABLEDEC <filename> [, <multilevel-filename>], { ALL |<field_list>}�[ON ERROR <statements>]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Encode",
         "Icon": 3,
         "Index": 237,
         "Documentation": "Performs data encoding on input data. UniVerse supports\nBase64 encoding only.",
         "Detail": "ENCODE(algorithm, action, data, dataLoc, result, resultLoc)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Encrypt",
         "Icon": 3,
         "Index": 238,
         "Documentation": "Performs symmetric encryption operations. You can call various block and stream symmetric ciphers through this function.",
         "Detail": "ENCRYPT (algorithm, action, data, dataLoc,key, keyLoc, keyAction, salt,�IV, result, resultLoc, signAlg)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "End",
         "Icon": 14,
         "Index": 239,
         "Documentation": "The END statement is used to terminate a program or to conclude a set of jBC statements bounded by a condition.",
         "Detail": "END"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "End Case",
         "Icon": 3,
         "Index": 241,
         "Documentation": "The END CASE statement terminates a CASE block. There should be a corresponding END CASE for each BEGIN CASE.",
         "Detail": "END CASE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "End Else",
         "Icon": 14,
         "Index": 243,
         "Documentation": "The END ELSE terminates the THEN portion and begin the ELSE portion of a code block",
         "Detail": "END ELSE"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "End transaction\n",
         "Icon": 14,
         "Index": 244,
         "Documentation": "Indicates where execution should continue after a transaction terminates.",
         "Detail": "END TRANSACTION"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Enter",
         "Icon": 14,
         "Index": 245,
         "Documentation": "Executes an external subroutine.",
         "Detail": "ENTER subroutine\nENTER @variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Eof",
         "Icon": 3,
         "Index": 246,
         "Documentation": "Checks whether the command line argument pointer is past the last command line argument.",
         "Detail": "EOF( argument )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Eqs",
         "Icon": 3,
         "Index": 247,
         "Documentation": "Compares the equality of corresponding elements of two dynamic arrays.",
         "Detail": "EQS( array1, array2 )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Equate",
         "Icon": 3,
         "Index": 248,
         "Documentation": "EQUATE is used to declare a symbol equivalent to a literal, variable or simple expression.",
         "Detail": "EQU[ATE] symbol TO expression [,symbol TO expression �]\nEQU[ATE] symbol LIT[ERALLY] string [,symbol LIT string �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ereplace",
         "Icon": 3,
         "Index": 250,
         "Documentation": "Substitutes an element of a string with a replacement element.",
         "Detail": "EREPLACE (expression, substring, replacement [,occurrence [,begin]] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Errmsg",
         "Icon": 14,
         "Index": 251,
         "Documentation": "Prints a formatted error message from the ERRMSG file.",
         "Detail": "ERRMSG message.ID [,message.ID �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Exchange",
         "Icon": 3,
         "Index": 252,
         "Documentation": "Replaces one character with another or deletes all occurrences of a specific character.",
         "Detail": "EXCHANGE (string, xx, yy)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Execute",
         "Icon": 3,
         "Index": 253,
         "Documentation": "The EXECUTE or PERFORM statement allows the currently executing program to pause and execute any other UNIX/NT program, including another jBC program or a jBASE command.",
         "Detail": "EXECUTE|PERFORM expression [CAPTURING variable] [RETURNING|SETTING variable]\n[PASSLIST expression] [RTNLIST [variable]]\n[PASSDATA variable] [RTNDATA variable]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Exit",
         "Icon": 3,
         "Index": 255,
         "Documentation": "The EXIT statement is used to halt the execution of a program and return a numeric exit code to the parent process. For compatibility with older versions of the language the EXIT statement may be used without an expression. In this case it is synonymous with the BREAK statement.",
         "Detail": "EXIT (expression)\nEXIT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Exp",
         "Icon": 3,
         "Index": 257,
         "Documentation": "Calculates the result of base \"e\" raised to the power designated by the value of the expression.",
         "Detail": "EXP( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Extract",
         "Icon": 3,
         "Index": 258,
         "Documentation": "Extracts the contents of a specified field, value, or subvalue from a dynamic array.",
         "Detail": "EXTRACT (dynamic.array, field#[,value# [,subvalue#]] )�variable < field# [ ,value# [,subvalue#]] >"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fadd",
         "Icon": 3,
         "Index": 259,
         "Documentation": "Performs floating-point addition on two numeric values. This function is provided for compatibility with existing software.",
         "Detail": "FADD( number1, number2 ) "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fdiv",
         "Icon": 3,
         "Index": 260,
         "Documentation": "Performs floating-point division on two numeric values.",
         "Detail": "FDIV( number1, number2 )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ffix",
         "Icon": 3,
         "Index": 261,
         "Documentation": "Converts a floating-point number to a string with a fixed precision. FFIX is\nprovided for compatibility with existing software.",
         "Detail": "FFIX( number )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fflt",
         "Icon": 14,
         "Index": 262,
         "Documentation": "Rounds a number to a string with a precision of 14.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Field",
         "Icon": 3,
         "Index": 263,
         "Documentation": "The FIELD function will return a multi-character delimited field from within a string.",
         "Detail": "FIELD (string, delimiter, occurrence [,num.substr] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fields ",
         "Icon": 3,
         "Index": 265,
         "Documentation": "Examines each element of a dynamic array for any occurrence of a specified delimiter and returns substrings that are marked by that delimiter.",
         "Detail": "FIELDS (dynamic.array, delimiter, occurrence [ ,num.substr] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fieldstore ",
         "Icon": 3,
         "Index": 266,
         "Documentation": "Replaces, deletes, or inserts substrings in a specified character string.",
         "Detail": "FIELDSTORE (string, delimiter, start, n, new.string)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fileinfo",
         "Icon": 3,
         "Index": 267,
         "Documentation": "Returns information about the specified file�s configuration.",
         "Detail": "FILEINFO (file.variable , key )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Filelock\n",
         "Icon": 14,
         "Index": 268,
         "Documentation": "Sets a file update lock on an entire file to prevent other users from updating the\nfile until this program releases it.",
         "Detail": "FILELOCK [file.variable] [, lock.type]�[ON ERROR statements] [LOCKED statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fileunlock\n",
         "Icon": 14,
         "Index": 269,
         "Documentation": "Releases file locks set by the FILELOCK statement.",
         "Detail": "FILEUNLOCK [file.variable] [ON ERROR statements]\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Find  ",
         "Icon": 14,
         "Index": 270,
         "Documentation": "Locates a given occurrence of an element within a dynamic array.",
         "Detail": "FINDelement IN dynamic.array [,occurrence] SETTING fmc [,vmc [,smc]]�{THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Findstr",
         "Icon": 14,
         "Index": 271,
         "Documentation": "Locates a given occurrence of a substring.",
         "Detail": "FINDSTRsubstring IN dynamic.array [,occurrence] SETTING fmc [,vmc [,smc]]�{THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fix",
         "Icon": 3,
         "Index": 272,
         "Documentation": "Rounds an expression to a decimal number having the accuracy specified by the PRECISION statement.",
         "Detail": "FIX(number [,precision [,mode]] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Flush",
         "Icon": 14,
         "Index": 273,
         "Documentation": "Causes all buffers to be written simultaneously.",
         "Detail": "FLUSH file.variable {THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fmt",
         "Icon": 3,
         "Index": 274,
         "Documentation": "Converts data from its internal representation to a specified format for output.",
         "Detail": "FMT (expression, format)expressionformat"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fmtdp",
         "Icon": 3,
         "Index": 275,
         "Documentation": "Formats data for output in display positions rather than character lengths.",
         "Detail": "FMTDP (expression, format [, mapname ] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fmts  ",
         "Icon": 3,
         "Index": 276,
         "Documentation": "Converts elements of a dynamic array from their internal representation to a specified format for output.",
         "Detail": "FMTS (dynamic.array, format)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fmtsdp",
         "Icon": 3,
         "Index": 277,
         "Documentation": "Formats elements of a dynamic array for output in display positions rather than character lengths.",
         "Detail": "FMTSDP (dynamic.array, format [, mapname] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fmul",
         "Icon": 3,
         "Index": 278,
         "Documentation": "Performs floating-point multiplication on two numeric values. This function is provided for compatibility with existing software.",
         "Detail": "FMUL (number1, number2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fold ",
         "Icon": 3,
         "Index": 279,
         "Documentation": "Divides a string into a number of shorter sections.",
         "Detail": "FOLD (string, length )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Folddp ",
         "Icon": 3,
         "Index": 280,
         "Documentation": "Divides a string into a number of substrings separated by field marks, in display positions rather than character lengths.",
         "Detail": "FOLDDP (string, length [, mapname ] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Footing ",
         "Icon": 14,
         "Index": 281,
         "Documentation": "Specifies text to be printed at the bottom of each page.",
         "Detail": "FOOTING [ON print.channel] footing"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "For",
         "Icon": 14,
         "Index": 282,
         "Documentation": "The FOR statement allows the programming of looping constructs within the program. The loop is controlled by a counting variable and may be terminated early by expressions tested after every iteration.",
         "Detail": "FOR var = expression1 TO expression2 [STEP expression3]\n\n[WHILE | UNTIL expression4]\nNEXT [var]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "FormList",
         "Icon": 14,
         "Index": 284,
         "Documentation": "The FORMLIST statement creates an active select list from a dynamic array.",
         "Detail": "FORMLIST [variable] [TO list.number] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Fsub ",
         "Icon": 3,
         "Index": 285,
         "Documentation": "Performs floating-point subtraction on two numeric values.",
         "Detail": "FSUB (number1, number2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Function",
         "Icon": 3,
         "Index": 286,
         "Documentation": "Identifies a user-written function.",
         "Detail": "FUNCTION [name] [( [MAT] variable [, [MAT] variable �] )]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "generateKey  ",
         "Icon": 3,
         "Index": 287,
         "Documentation": "Generates a public key cryptography key pair and encrypts the\nprivate key.",
         "Detail": "generateKey(privKey, pubKey, format, keyLoc, algorithm, keyLength,�passPhrase, paramFile)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ges ",
         "Icon": 3,
         "Index": 288,
         "Documentation": "Indicates when elements of one dynamic array are greater than or equal to corresponding elements of another dynamic array.",
         "Detail": "GES (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Get ",
         "Icon": 14,
         "Index": 289,
         "Documentation": "Reads a block of data from an input stream associated with a device, such as a serial line or terminal.",
         "Detail": "GET[X] read.var[, length] [SETTING read.count] FROM device [UNTIL eop.char.list ] [RETURNING last.char.read ]�[WAITING seconds ] [THEN statements ] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Get( Arg. )",
         "Icon": 3,
         "Index": 290,
         "Documentation": "Retrieves a command line argument.",
         "Detail": "GET(ARG.) variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getCipherSuite  ",
         "Icon": 3,
         "Index": 291,
         "Documentation": "Obtains information about supported cipher suites, their\nversion, usage, strength and type for the specified security\ncontext.",
         "Detail": "getCipherSuite(context,ciphers)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getHTTPDefault\n",
         "Icon": 3,
         "Index": 292,
         "Documentation": "Returns the default values of the HTTP settings.",
         "Detail": "getHTTPDefault(option, value)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getIpv",
         "Icon": 3,
         "Index": 293,
         "Documentation": "Display the current IPv setting on the system or a particular network connection.",
         "Detail": "getIpv ([networkexpr])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Getlist ",
         "Icon": 14,
         "Index": 294,
         "Documentation": "Activates a saved select list so it can be used by a READNEXT statement.",
         "Detail": "GETLIST listname [TO list.number] [SETTING variable]�{THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Getlocale ",
         "Icon": 3,
         "Index": 295,
         "Documentation": "Retrieves the names of specified categories of the current locale.",
         "Detail": "GETLOCALE (category)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Getrem ",
         "Icon": 3,
         "Index": 296,
         "Documentation": "Returns the numeric value for the position of the REMOVE pointer associated with a dynamic array.",
         "Detail": "GETREM (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getSocketErrorMessage\n",
         "Icon": 3,
         "Index": 297,
         "Documentation": "Translates an error code into a text error message.",
         "Detail": "getSocketErrorMessage(errCode, errMsg)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getSocketInformation\n",
         "Icon": 3,
         "Index": 298,
         "Documentation": "Obtains information about a socket connection.",
         "Detail": "getSocketInformation(socket_handle, self_ or_ peer, socket_info)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getSocketMap",
         "Icon": 3,
         "Index": 299,
         "Documentation": "Gets the NLS map associated with the input socket handle.",
         "Detail": "getSocketMap(aSocket, mapname)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "getSocketOptions  ",
         "Icon": 3,
         "Index": 300,
         "Documentation": "Gets the current value for a socket option associated with a\nsocket of any type.",
         "Detail": "getSocketOptions(socket_handle, options)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Getx ",
         "Icon": 14,
         "Index": 301,
         "Documentation": "Reads a block of data from an input stream associated with a device, and returns the characters in ASCII hexadecimal format.",
         "Detail": "GETX"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Gosub",
         "Icon": 3,
         "Index": 302,
         "Documentation": "The GOSUB statement causes execution of a local subroutine, after which execution will continue with the next line of code.",
         "Detail": "GOSUB label[:]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Goto",
         "Icon": 14,
         "Index": 304,
         "Documentation": "The GOTO statement causes program execution to jump to the code at a specified label.",
         "Detail": "GOTO label[:]\nGO TO label[:]\nGO label[:]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Group \n",
         "Icon": 3,
         "Index": 306,
         "Documentation": "Returns a substring that is located between the stated number of occurrences of a delimiter.",
         "Detail": "GROUP (string, delimiter, occurrence [,num.substr] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Groupstore \n",
         "Icon": 14,
         "Index": 307,
         "Documentation": "Modifies existing character strings by inserting, deleting, or replacing substrings that are separated by a delimiter character.",
         "Detail": "GROUPSTORE new.string IN string USING start, n [ ,delimiter]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Gts",
         "Icon": 3,
         "Index": 308,
         "Documentation": "Indicates when elements of one dynamic array are greater than corresponding elements of another dynamic array.",
         "Detail": "GTS (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Heading ",
         "Icon": 14,
         "Index": 309,
         "Documentation": "Specifies text to be printed at the top of each page.",
         "Detail": "HEADING [ON print.channel] heading"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Headinge ",
         "Icon": 14,
         "Index": 310,
         "Documentation": "Specifies text to be printed at the top of each page with the $OPTIONS statement HEADER.EJECT selected.",
         "Detail": "HEADINGE [ON print.channel] heading"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Headingn ",
         "Icon": 14,
         "Index": 311,
         "Documentation": "Specifies text to be printed at the top of each page with the $OPTIONS statement -HEADER.EJECT selected.",
         "Detail": "HEADINGN [ON print.channel] heading"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Hmac ",
         "Icon": 3,
         "Index": 312,
         "Documentation": "Calculate a message authentication code (MAC) involving a cryptographic hash function in combination with a secret key.",
         "Detail": "hmac= HMAC(hmacAlg, hmacKey, hmacData, [outFormat])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Hush ",
         "Icon": 14,
         "Index": 313,
         "Documentation": "Suppresses all text normally sent to a terminal during processing.",
         "Detail": "HUSH { ON | OFF | expression} [SETTING status ]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Icheck ",
         "Icon": 3,
         "Index": 314,
         "Documentation": "Verifies that specified data and primary keys satisfy the defined SQL integrity constraints for an SQL table.",
         "Detail": "ICHECK (dynamic.array [, file.variable] , key [, column#] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Iconv",
         "Icon": 3,
         "Index": 315,
         "Documentation": "The ICONV function converts data in external form such as dates to their internal form.",
         "Detail": "ICONV (string, conversion)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Iconvs ",
         "Icon": 3,
         "Index": 317,
         "Documentation": "Converts elements of a dynamic array to internal storage format.",
         "Detail": "ICONVS (dynamic.array, conversion)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "If ",
         "Icon": 14,
         "Index": 318,
         "Documentation": "Determines program flow based on the evaluation of an expression.",
         "Detail": "IF expression {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ifs ",
         "Icon": 3,
         "Index": 319,
         "Documentation": "Evaluates a dynamic array and creates another dynamic array on the basis of the truth or falsity of its elements.",
         "Detail": "IFS (dynamic.array, true.array, false.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ilprompt ",
         "Icon": 3,
         "Index": 320,
         "Documentation": "Evaluates strings containing in-line prompts.",
         "Detail": "ILPROMPT (in.line.prompt)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Include",
         "Icon": 14,
         "Index": 321,
         "Documentation": "Inserts and includes the specified BASIC source code from another program into the program being compiled. Same as the #INCLUDE and $INCLUDE statements.",
         "Detail": "INCLUDE [filename] program\nINCLUDE program FROM filename"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Index",
         "Icon": 3,
         "Index": 322,
         "Documentation": "The INDEX function will return the position of a character or characters within another string.",
         "Detail": "INDEX (string, substring, occurrence)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Indexs ",
         "Icon": 3,
         "Index": 324,
         "Documentation": "Returns the starting column position of a specified occurrence of a particular substring within each element of a dynamic array.",
         "Detail": "INDEXS (dynamic.array, substring, occurrence)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Indices \n",
         "Icon": 3,
         "Index": 325,
         "Documentation": "Returns information about the secondary key indexes in a file.",
         "Detail": "INDICES (file.variable [,indexname])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "initSecureServerSocket\n",
         "Icon": 3,
         "Index": 326,
         "Documentation": "Creates a secured connection-oriented stream server socket.",
         "Detail": "initSecureServerSocket(name_or_IP, port, backlog, svr_socket, context)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "initServerSocket  ",
         "Icon": 3,
         "Index": 327,
         "Documentation": "Creates a connection-oriented (stream) socket.",
         "Detail": "initServerSocket(name_or_IP, port, backlog, svr_socket)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inmat ",
         "Icon": 3,
         "Index": 328,
         "Documentation": "Used with the MATPARSE, MATREAD, and MATREADU statements to return the number of array elements or with the OPEN statement to return the modulo of a file.",
         "Detail": "INMAT ([array] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Input  ",
         "Icon": 14,
         "Index": 329,
         "Documentation": "Allows data input from the keyboard during program execution.",
         "Detail": "INPUT variable [,length] [:] [_]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Input   @",
         "Icon": 3,
         "Index": 330,
         "Documentation": "Positions the cursor at a specified location and defines the length of the\ninput field.",
         "Detail": "INPUT @ (col, row) [, | :] variable [,length] [:] [format] [_]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inputclear ",
         "Icon": 14,
         "Index": 331,
         "Documentation": "Clears the type-ahead buffer.",
         "Detail": "INPUTCLEAR�"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inputdisp ",
         "Icon": 3,
         "Index": 332,
         "Documentation": "Positions the cursor at a specified location and defines a format for the variable to print.",
         "Detail": "INPUTDISP [@(col, row) [, | :]] variable [format]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inputdp ",
         "Icon": 14,
         "Index": 334,
         "Documentation": "In NLS mode, use the INPUTDP statement to let the user enter data. The INPUTDP statement is similar to the INPUT, INPUTIF, and INPUTDISP statements, but it calculates display positions rather than character lengths.",
         "Detail": "INPUTDP variable [, length] [:] [_] [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inputerr ",
         "Icon": 14,
         "Index": 335,
         "Documentation": "Prints a formatted error message from the ERRMSG file on the bottom line of the terminal.",
         "Detail": "INPUTERR [error.message]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inptuif ",
         "Icon": 3,
         "Index": 336,
         "Documentation": "Assigns the contents of the type-ahead buffer to a variable.",
         "Detail": "INPUTIF @ (col, row) [, | :] variable [,length] [:] [format] [_]�[THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inputnull ",
         "Icon": 14,
         "Index": 337,
         "Documentation": "Defines a single character to be recognized as the empty string in an INPUT @ statement.",
         "Detail": "INPUTNULL character"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Inputtrap ",
         "Icon": 14,
         "Index": 338,
         "Documentation": "Branches to a program label or subroutine on a TRAP key.",
         "Detail": "INPUTTRAP [trap.chars] {GOTO | GOSUB} label [ ,label �]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ins ",
         "Icon": 14,
         "Index": 339,
         "Documentation": "Inserts a specified field, value, or subvalue into a dynamic array.",
         "Detail": "INS expression BEFORE dynamic.array < field# [,value# [ ,subvalue#]] >"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Insert ",
         "Icon": 3,
         "Index": 340,
         "Documentation": "Inserts a field, value, or subvalue into a dynamic array.",
         "Detail": "INSERT (dynamic.array, field#, value#, subvalue#, expression)\nINSERT (dynamic.array, field# [ ,value# [,subvalue#]] ; expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Int",
         "Icon": 3,
         "Index": 341,
         "Documentation": "The INT function truncates a numeric value into its nearest integer form.",
         "Detail": "INT(expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Isnull \n",
         "Icon": 3,
         "Index": 343,
         "Documentation": "Indicates when a variable is the null value.",
         "Detail": "ISNULL (variable)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Isnulls \n",
         "Icon": 3,
         "Index": 344,
         "Documentation": "Indicates when an element of a dynamic array is the null value.",
         "Detail": "ISNULLS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Itype ",
         "Icon": 3,
         "Index": 345,
         "Documentation": "Returns the value resulting from the evaluation of an I-descriptor.",
         "Detail": "ITYPE (i.type)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Keyedit ",
         "Icon": 3,
         "Index": 346,
         "Documentation": "Assigns specific editing functions to the keys on the keyboard to be used with the INPUT statement.",
         "Detail": "KEYEDIT (function, key) [, (function, key)] �"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Keyexit ",
         "Icon": 3,
         "Index": 347,
         "Documentation": "Specifies exit traps for the keys assigned editing functions by the KEYEDIT statement.",
         "Detail": "KEYEXIT (value, key) [, (value, key)] �"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Keyin ",
         "Icon": 3,
         "Index": 348,
         "Documentation": "Reads a single character from the input buffer and returns it.",
         "Detail": "KEYIN ()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Keytrap ",
         "Icon": 3,
         "Index": 349,
         "Documentation": "Specifies traps for the keys assigned specific functions by the KEYEDIT statement.",
         "Detail": "KEYTRAP (value, key) [, (value, key)] �"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Left ",
         "Icon": 3,
         "Index": 350,
         "Documentation": "Specifies a substring consisting of the first n characters of a string.",
         "Detail": "LEFT (string, n)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Len",
         "Icon": 3,
         "Index": 351,
         "Documentation": "The LEN function returns the character length of the supplied expression.",
         "Detail": "LEN( string )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Lendp ",
         "Icon": 3,
         "Index": 353,
         "Documentation": "Returns the number of display positions in a string.",
         "Detail": "LENDP (string [,mapname] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Lens ",
         "Icon": 3,
         "Index": 354,
         "Documentation": "Calculates the length of each element of a dynamic array.",
         "Detail": "LENS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Lensdp ",
         "Icon": 3,
         "Index": 355,
         "Documentation": "Returns a dynamic array of the number of display positions in each element of a dynamic array.",
         "Detail": "LENSDP (dynamic.array [, mapname] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Les ",
         "Icon": 3,
         "Index": 356,
         "Documentation": "Indicates when elements of one dynamic array are less than or equal to corresponding elements of another dynamic array.",
         "Detail": "LES (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Let ",
         "Icon": 14,
         "Index": 357,
         "Documentation": "Assigns a value to a variable.",
         "Detail": "[LET] variable = expression"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ln ",
         "Icon": 3,
         "Index": 358,
         "Documentation": "Calculates the natural logarithm of an expression in base \"e\".",
         "Detail": "LN (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "loadSecurityContext\n",
         "Icon": 3,
         "Index": 359,
         "Documentation": "Loads a saved security context record into the current session.",
         "Detail": "loadSecurityContext(context, name, passPhrase)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Localeinfo ",
         "Icon": 3,
         "Index": 360,
         "Documentation": "Retrieves the settings of the current locale.",
         "Detail": "LOCALEINFO (category)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Locate ",
         "Icon": 14,
         "Index": 361,
         "Documentation": "Searches a dynamic array for a particular value or string, and returns the index of its position.",
         "Detail": "LOCATE expression IN dynamic.array [< field# [, value#] >] [, start] [BY seq] SETTING variable�{THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Lock ",
         "Icon": 14,
         "Index": 362,
         "Documentation": "Sets an execution lock to protect user-defined resources or events from being used by more than one concurrently running program.",
         "Detail": "LOCK expression [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Loop",
         "Icon": 14,
         "Index": 363,
         "Documentation": "The LOOP construct allows the programmer to specify loops with multiple exit conditions.",
         "Detail": "LOOP statements1 WHILE|UNTIL expression DO statements2 REPEAT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Lower",
         "Icon": 3,
         "Index": 365,
         "Documentation": "The LOWER function lowers system delimiters in a string to the next lowest delimiter.",
         "Detail": "LOWER(expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Lts ",
         "Icon": 3,
         "Index": 367,
         "Documentation": "Indicates when elements of one dynamic array are less than corresponding\nelements of another dynamic array.",
         "Detail": "LTS (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Mat",
         "Icon": 14,
         "Index": 368,
         "Documentation": "The MAT command is used to either assign every element in a specified array to a single value or to assign the entire contents of one array to another.",
         "Detail": "MAT Array = expression\nMAT Array1 = MAT Array2"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matbuild ",
         "Icon": 4,
         "Index": 370,
         "Documentation": "Builds a string by concatenating the elements of an array.",
         "Detail": "MATBUILD dynamic.array FROM array [,start [,end]] [USING delimiter]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Match",
         "Icon": 14,
         "Index": 371,
         "Documentation": "The MATCH or MATCHES function allows pattern matching to be applied to an expression.",
         "Detail": "expression1 MATCH/MATCHES expression2"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matchfield ",
         "Icon": 3,
         "Index": 372,
         "Documentation": "Returns the contents of a substring that matches a specified pattern or\npart of a pattern.",
         "Detail": "MATCHFIELD (string, pattern, field)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matparse ",
         "Icon": 4,
         "Index": 373,
         "Documentation": "Assigns the elements of an array from the elements of a dynamic array.",
         "Detail": "MATPARSE array FROM dynamic.array [,delimiter]\nMATPARSE array [,start [,end]] FROM dynamic.array [USING delimiter] [SETTING elements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matread \n",
         "Icon": 4,
         "Index": 374,
         "Documentation": "Assigns the data stored in successive fields of a record from a UniVerse file to the consecutive elements of an array.",
         "Detail": "MATREAD array FROM [file.variable,] record.ID [ON ERROR statements]\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matreadl ",
         "Icon": 4,
         "Index": 375,
         "Documentation": "Sets a shared read lock on a record, then assigns the data stored in successive fields of the record to the consecutive elements of an array.",
         "Detail": "MATREADL array FROM [file.variable,] record.ID [ON ERROR statements] [LOCKED statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matreadu ",
         "Icon": 4,
         "Index": 376,
         "Documentation": "Sets an exclusive update lock on a record, then assigns the data stored in successive fields of the record to the consecutive elements of an array",
         "Detail": "MATREADU array FROM [file.variable,] record.ID [ON ERROR statements] [LOCKED statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matwrite  ",
         "Icon": 4,
         "Index": 377,
         "Documentation": "Assigns the data stored in consecutive elements of an array to the successive fields of a record in a UniVerse file.",
         "Detail": "MATWRITE array ON | TO [file.variable,] record.ID [ON ERROR statements] [LOCKED statements] [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Matwriteu ",
         "Icon": 4,
         "Index": 378,
         "Documentation": "Assigns the data stored in consecutive elements of an array to the successive fields of a record in a UniVerse file, retaining any update locks set on the record.",
         "Detail": "MATWRITEU array ON | TO [file.variable,] record.ID [ON ERROR statements] [LOCKED statements] [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Maximum \n",
         "Icon": 3,
         "Index": 379,
         "Documentation": "Returns the element with the highest numeric value in a dynamic array.",
         "Detail": "MAXIMUM (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Minimum \n",
         "Icon": 3,
         "Index": 380,
         "Documentation": "Returns the element with the lowest numeric value in a dynamic array.",
         "Detail": "MINIMUM (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Mod ",
         "Icon": 3,
         "Index": 381,
         "Documentation": "Calculates the modulo (the remainder) of two expressions.",
         "Detail": "MOD (dividend, divisor)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Mods ",
         "Icon": 3,
         "Index": 382,
         "Documentation": "Calculates the modulo (the remainder) of elements of two dynamic arrays.",
         "Detail": "MODS (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Mqclose ",
         "Icon": 3,
         "Index": 383,
         "Documentation": "Close access to a queue or other object.",
         "Detail": "status=MQCLOSE(hConn, hObj, options)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Mqconn ",
         "Icon": 3,
         "Index": 384,
         "Documentation": "Connects an application to a WebSphere MQ queue manager.",
         "Detail": "status=MQCONN(qManager, hConn)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Mqdisc ",
         "Icon": 3,
         "Index": 385,
         "Documentation": "Terminates connections to the queue manager.",
         "Detail": "status=MQDISC(hConn)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Muls ",
         "Icon": 3,
         "Index": 386,
         "Documentation": "Multiplies elements of two dynamic arrays.",
         "Detail": "MULS (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Nap ",
         "Icon": 14,
         "Index": 387,
         "Documentation": "Suspends execution of a BASIC program, pausing for a specified number of milliseconds.",
         "Detail": "NAP [milliseconds]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Neg ",
         "Icon": 3,
         "Index": 388,
         "Documentation": "Returns the arithmetic additive inverse of the value of the argument.",
         "Detail": "NEG (number)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Negs ",
         "Icon": 3,
         "Index": 389,
         "Documentation": "Returns the negative numeric values of elements in a dynamic array. If the value of an element is negative, the returned value is positive.",
         "Detail": "NEGS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Nes ",
         "Icon": 3,
         "Index": 390,
         "Documentation": "Indicates when elements of one dynamic array are not equal to corresponding elements of another dynamic array.",
         "Detail": "NES (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Next ",
         "Icon": 14,
         "Index": 391,
         "Documentation": "The NEXT statement terminates a FOR loop. Control is passed back to the FOR statement and the variable is incremented or decremented.",
         "Detail": "NEXT [variable]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Nobuf ",
         "Icon": 14,
         "Index": 393,
         "Documentation": "Turns off buffering for a sequential file.",
         "Detail": "NOBUF file.variable {THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Not",
         "Icon": 3,
         "Index": 394,
         "Documentation": "The NOT function is used to invert the Boolean value of an expression. It useful for explicitly testing for a false condition.",
         "Detail": "NOT( expression )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Nots ",
         "Icon": 3,
         "Index": 396,
         "Documentation": "Returns the complement of the logical value of each element of a dynamic array.",
         "Detail": "NOTS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Null ",
         "Icon": 14,
         "Index": 397,
         "Documentation": "Indicates that no operation is to be performed.",
         "Detail": null
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Num ",
         "Icon": 3,
         "Index": 398,
         "Documentation": "Returns true (1) if the argument is a numeric data type; otherwise, returns false (0).",
         "Detail": "NUM (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Nums ",
         "Icon": 3,
         "Index": 399,
         "Documentation": "Returns true (1) for each element of a dynamic array that is a numeric data type;\notherwise, returns false (0).",
         "Detail": "NUMS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Oconv",
         "Icon": 3,
         "Index": 400,
         "Documentation": "The OCONV statement is used to convert internal representations of data to their external form.",
         "Detail": "OCONV (string, conversion)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Oconvs ",
         "Icon": 3,
         "Index": 402,
         "Documentation": "Converts elements of a dynamic array from their internal representation to an external output format.",
         "Detail": "OCONVS (dynamic.array, conversion)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "On ",
         "Icon": 14,
         "Index": 403,
         "Documentation": "Transfers program control to a specified internal subroutine or to a specified\nstatement, under specified conditions.",
         "Detail": "ON expression GOSUB statement.label [:] [,statement.label [:]� ]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Open",
         "Icon": 14,
         "Index": 404,
         "Documentation": "The OPEN statement is used to open a file or device to a descriptor variable.\nIf the OPEN statement fails, it executes any statements associated with an ELSE clause. If the OPEN is successful it will execute any statements associated with a THEN clause. Note that either one or both of the THEN and ELSE clauses are required.",
         "Detail": "OPEN [dict,] filename [TO file.variable] [ON ERROR statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Opencheck ",
         "Icon": 14,
         "Index": 406,
         "Documentation": "Opens an SQL table for use by BASIC programs, enforcing SQL integrity\nchecking.",
         "Detail": "OPENCHECK [dict,] filename [TO file.variable] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Opendev ",
         "Icon": 14,
         "Index": 407,
         "Documentation": "Opens a device for input or output.",
         "Detail": "OPENDEV device TO file.variable [LOCKED statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Openpath ",
         "Icon": 14,
         "Index": 408,
         "Documentation": "Opens a file to be used in a BASIC program.",
         "Detail": "OPENPATH pathname [TO file.variable] [ON ERROR statements] {THEN statements [ELSE statements] | ELSE statements}\nstatement"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "openSecureSocket  ",
         "Icon": 3,
         "Index": 409,
         "Documentation": "Opens a secure socket connection in a specified mode and\nreturn the status.",
         "Detail": "openSecureSocket(name_or_IP, port, mode, timeout, socket_handle, context)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "OPENSEQ  ",
         "Icon": 14,
         "Index": 410,
         "Documentation": "Prepares a UniVerse file for sequential use by the BASIC program.",
         "Detail": "OPENSEQ filename, record.ID TO file.variable [USING dynamic.array] [ON ERROR statements] [LOCKED statements] {THEN statements [ELSE statements] | ELSE statements}\nOPENSEQ pathname TO file.variable [USING dynamic.array] [ON ERROR statements] [LOCKED statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "openSocket  ",
         "Icon": 3,
         "Index": 411,
         "Documentation": "Opens a socket connection in a specified mode and returns the\nstatus.",
         "Detail": "openSocket(name_or_IP, port, mode, timeout, socket_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "OpenXMLData\n",
         "Icon": 3,
         "Index": 412,
         "Documentation": "Opens an XML document after it is prepared.",
         "Detail": "Status=OpenXMLData(xml_handle,xml_data_extraction_rule, xml_data_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ors ",
         "Icon": 3,
         "Index": 413,
         "Documentation": "Performs a logical OR on elements of two dynamic arrays.",
         "Detail": "ORS (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Page ",
         "Icon": 14,
         "Index": 414,
         "Documentation": "Prints a footing at the bottom of the page, advances to the next page, and\nprints a heading at the top.",
         "Detail": "PAGE [ON print.channel] [page#]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Perform ",
         "Icon": 14,
         "Index": 415,
         "Documentation": "Executes a specified UniVerse sentence, paragraph, menu, or command from\nwithin the BASIC program, and then returns execution to the statement following\nthe PERFORM statement.",
         "Detail": "PERFORM command"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Precision \n",
         "Icon": 14,
         "Index": 416,
         "Documentation": "Sets the maximum number of decimal places allowed in the conversion from the\ninternal binary format of a numeric value to the string representation.",
         "Detail": "PRECISION expression"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "PrepareXML  ",
         "Icon": 3,
         "Index": 417,
         "Documentation": "Allocates memory for the XML document, opens the document,\ndetermines the file structure of the document, and returns the file structure.",
         "Detail": "Status=PrepareXML(xml_file,xml_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Print",
         "Icon": 14,
         "Index": 418,
         "Documentation": "The PRINT statement sends data directly to the current output device, which will either be the terminal or the printer.",
         "Detail": "PRINT [ON print.channel] [print.list]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Printer close ",
         "Icon": 14,
         "Index": 422,
         "Documentation": "Print all output data stored in the printer buffer.",
         "Detail": "PRINTER CLOSE [ON print.channel]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Printer off ",
         "Icon": 14,
         "Index": 424,
         "Documentation": "PRINTER OFF will cause all subsequent output from the PRINT statement to be redirected to the terminal device.",
         "Detail": "PRINTER OFF"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Printer on ",
         "Icon": 14,
         "Index": 425,
         "Documentation": "PRINTER ON will cause all subsequent output from the PRINT statement to be redirected to the print spooler.",
         "Detail": "PRINTER ON"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Printer reset ",
         "Icon": 14,
         "Index": 426,
         "Documentation": "Resets the printing options.",
         "Detail": "PRINTER RESET "
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Printerr ",
         "Icon": 14,
         "Index": 427,
         "Documentation": "Prints a formatted error message from the ERRMSG file on the bottom line\nof the terminal.",
         "Detail": "PRINTERR [error.message]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Procread ",
         "Icon": 14,
         "Index": 428,
         "Documentation": "Assigns the contents of the primary input buffer of the proc to a variable.",
         "Detail": "PROCREAD variable {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Procwrite ",
         "Icon": 14,
         "Index": 429,
         "Documentation": "Writes the specified string to the primary input buffer of the proc that called your BASIC program.",
         "Detail": "PROCWRITE string"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Program",
         "Icon": 14,
         "Index": 430,
         "Documentation": "Performs no function other than to document the source code.",
         "Detail": "PROG[RAM] [name]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Prompt ",
         "Icon": 14,
         "Index": 432,
         "Documentation": "Defines the prompt character for user input.",
         "Detail": "PROMPT character"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "protocolLogging  ",
         "Icon": 3,
         "Index": 433,
         "Documentation": "Starts or stops logging.",
         "Detail": "protocolLogging(log_file, log_action, log_level)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Pwr ",
         "Icon": 3,
         "Index": 434,
         "Documentation": "Calculates the value of an expression when raised to a specified power.",
         "Detail": "PWR (expression, power)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Pycall ",
         "Icon": 3,
         "Index": 435,
         "Documentation": "Calls a Python callable object.",
         "Detail": "pyresult = PyCall(PyCallableObject[,arg1, arg2, ...])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Pycallfunction ",
         "Icon": 3,
         "Index": 436,
         "Documentation": "The PyCallFunction function calls a Python function on a Python module.",
         "Detail": "pyresult = PyCallFunction(moduleName, functionName[, arg1, arg2, ...])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "PyCallMethod",
         "Icon": 3,
         "Index": 437,
         "Documentation": "The PyCallMethod function calls a method on a Python object.",
         "Detail": "pyresult = PyCallMethod(pyobject, methodName [,arg1, arg2, ...]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "PyGetAttr",
         "Icon": 3,
         "Index": 438,
         "Documentation": "The PyGetAttr function gets the value of an attribute of a Python object.",
         "Detail": "pyresult = PyGetAttr(pyobject, attrName)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "PyImport",
         "Icon": 3,
         "Index": 439,
         "Documentation": "The PyImport function imports a Python module",
         "Detail": "pyresult = PyImport(moduleName)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "PySetAttr",
         "Icon": 3,
         "Index": 440,
         "Documentation": "The PySetAttr function sets the value of an attribute of a Python object.",
         "Detail": "pyresult = PySetAttr(pyobject, attrName, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Quote ",
         "Icon": 3,
         "Index": 441,
         "Documentation": "Encloses an expression in double quotation marks.",
         "Detail": "QUOTE (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Raise",
         "Icon": 3,
         "Index": 442,
         "Documentation": "The RAISE function raises system delimiters in a string to the next highest delimiter.",
         "Detail": "RAISE (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Randomize \n",
         "Icon": 3,
         "Index": 444,
         "Documentation": "Initializes the RND function to ensure that the same sequence of random numbers is generated after initialization.",
         "Detail": "RANDOMIZE [(expression)]\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Read",
         "Icon": 14,
         "Index": 445,
         "Documentation": "The READ statement allows a program to read a record from a previously opened file into a variable.",
         "Detail": "READ dynamic.array FROM [file.variable,] record.ID [ON ERROR statements] READ dynamic.array FROM [file.variable,] record.ID [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readblk ",
         "Icon": 14,
         "Index": 447,
         "Documentation": "Reads a block of data from a UniVerse file open for sequential processing and assigns it to a variable.",
         "Detail": "READBLK variable FROM file.variable, blocksize THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readl ",
         "Icon": 14,
         "Index": 448,
         "Documentation": "Sets a shared read lock on a record, then assigns the contents of the record to a dynamic array variable.",
         "Detail": "READL dynamic.array FROM [file.variable ,] record.ID [ON ERROR statements] [LOCKED statements] { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readlist",
         "Icon": 14,
         "Index": 449,
         "Documentation": "READLIST allows the program to retrieve a previously stored list (perhaps created with the SAVE-LIST command), into a variable",
         "Detail": "READLIST dynamic.array [FROM list.number] { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readnext ",
         "Icon": 14,
         "Index": 451,
         "Documentation": "READNEXT retrieves the next element in a list variable.",
         "Detail": "READNEXT dynamic.array [,value [,subvalue]] [FROM list] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readseq ",
         "Icon": 14,
         "Index": 453,
         "Documentation": "Reads a line of data from a UniVerse file opened for sequential processing and assigns it to a variable.",
         "Detail": "READSEQ variable FROM file.variable [ON ERROR statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "readSocket  ",
         "Icon": 3,
         "Index": 454,
         "Documentation": "Reads data in the socket buffer up to max_read_size\ncharacters.",
         "Detail": "readSocket(socket_handle, socket_data, max_read_size, time_out, mode, actual_read_size)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readt ",
         "Icon": 3,
         "Index": 455,
         "Documentation": "Assigns the contents of the next record from a magnetic tape unit to the\nnamed variable.",
         "Detail": "READT [UNIT (mtu)] variable {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readu",
         "Icon": 14,
         "Index": 456,
         "Documentation": "The READU statement allows a program to read a record from a previously opened file into a variable. It respects record locking and locks the specified record for update.",
         "Detail": "READU dynamic.array FROM [file.variable ,] record.ID [ON ERROR statements] [LOCKED statements] { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readv",
         "Icon": 14,
         "Index": 458,
         "Documentation": "The READV statement allows a program to read a specific field from a record in a previously opened file into a variable.",
         "Detail": "READV dynamic.array FROM [file.variable ,] record.ID , field# [ON ERROR statements] { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readvl ",
         "Icon": 14,
         "Index": 460,
         "Documentation": "Sets a shared read lock on a record, then assigns the contents of a field of a\nrecord to a dynamic array variable.",
         "Detail": "READVL dynamic.array FROM [file.variable ,] record.ID , field# [ON ERROR statements] [LOCKED statements] { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Readvu ",
         "Icon": 14,
         "Index": 461,
         "Documentation": "Sets an exclusive update lock on a record, then assigns the contents of a field of\nthe record to a dynamic array variable.",
         "Detail": "READVU dynamic.array FROM [file.variable ,] record.ID , field# [ON ERROR statements] [LOCKED statements] { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "ReadXMLData\n",
         "Icon": 3,
         "Index": 462,
         "Documentation": "Reads an XML document after it is opened. UniVerse BASIC returns the XML data as a dynamic array.",
         "Detail": "Status=ReadXMLData(xml_data_handle, rec)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Real ",
         "Icon": 3,
         "Index": 463,
         "Documentation": "Converts a numeric expression into a real number without loss of accuracy.",
         "Detail": "REAL (number)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Recordlocked \n",
         "Icon": 3,
         "Index": 464,
         "Documentation": "Establishes whether or not a record is locked by a user.",
         "Detail": "RECORDLOCKED (file.variable , record.ID )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Recordlockl ",
         "Icon": 14,
         "Index": 465,
         "Documentation": "Sets a shared read-only lock on a record in a file.",
         "Detail": "RECORDLOCKL file.variable , record.ID [ON ERROR statements] [LOCKED statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Recordlocku ",
         "Icon": 14,
         "Index": 466,
         "Documentation": "Locks the specified record to prevent other users from accessing it.",
         "Detail": "RECORDLOCKU file.variable , record.ID [ON ERROR statements] [LOCKED statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Release",
         "Icon": 14,
         "Index": 467,
         "Documentation": "The RELEASE statement explicitly releases record locks without updating the records using a WRITE or DELETE and it also clears all execution locks without issuing an UNLOCK.",
         "Detail": "RELEASE [file.variable [,record.ID]] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "ReleaseXML  ",
         "Icon": 3,
         "Index": 469,
         "Documentation": "Releases the XML dynamic array after closing. ReleaseXML destroys the internal DOM tree and releases the associated memory.",
         "Detail": "ReleaseXML(XMLhandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rem ",
         "Icon": 14,
         "Index": 470,
         "Documentation": "Identifies a line as a comment line. Same as the *, !, and $* statements.",
         "Detail": "REM [comment.text]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rem ",
         "Icon": 3,
         "Index": 471,
         "Documentation": "Calculates the value of the remainder after integer division is performed.",
         "Detail": "REM (dividend, divisor)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Remove ",
         "Icon": 3,
         "Index": 472,
         "Documentation": "Removes substrings from a dynamic array.",
         "Detail": "REMOVE (dynamic.array, variable)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Repeat",
         "Icon": 14,
         "Index": 474,
         "Documentation": "REPEAT causes the loop to start again with the first statement following the LOOP statement.",
         "Detail": "REPEAT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Replace ",
         "Icon": 3,
         "Index": 476,
         "Documentation": "Replaces all or part of the contents of a dynamic array.",
         "Detail": "REPLACE (expression, field#, value#, subvalue# { , | ; } replacement)\nREPLACE (expression [,field# [,value#]] ; replacement) variable < field# [ ,value# [,subvalue#]] >"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Return",
         "Icon": 14,
         "Index": 477,
         "Documentation": "The RETURN statement transfers program execution to the caller of a subroutine/function or to a specific label in the program.",
         "Detail": "RETURN [TO statement.label]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Return ",
         "Icon": 3,
         "Index": 479,
         "Documentation": "Returns a value from a user-written function.",
         "Detail": "RETURN (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Reuse ",
         "Icon": 3,
         "Index": 480,
         "Documentation": "Reuses the last value in the shorter of two multivalue lists in a dynamic array operation.",
         "Detail": "REUSE (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Revremove ",
         "Icon": 14,
         "Index": 481,
         "Documentation": "Successively removes elements from a dynamic array, starting from the last element and moving right to left. Extracts successive fields, values, etc., for dynamic array processing.",
         "Detail": "REVREMOVE element FROM dynamic.array SETTING variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rewind ",
         "Icon": 3,
         "Index": 482,
         "Documentation": "Rewinds the magnetic tape to the beginning of the tape.",
         "Detail": "REWIND [UNIT (mtu)] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Right ",
         "Icon": 3,
         "Index": 483,
         "Documentation": "Specifies a substring consisting of the last n characters of a string.",
         "Detail": "RIGHT (string, n)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rnd ",
         "Icon": 3,
         "Index": 484,
         "Documentation": "Generates a random number between zero and a specified number minus one.",
         "Detail": "RND (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rollback ",
         "Icon": 14,
         "Index": 485,
         "Documentation": "Rolls back all changes made during a transaction. No changes are written to disk",
         "Detail": "ROLLBACK [WORK] [THEN statements] [ELSE statements ]\nstatement"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rpc.Call \n",
         "Icon": 3,
         "Index": 486,
         "Documentation": "Sends requests to a remote server.",
         "Detail": "RPC.CALL (connection.ID, procedure, #args, MAT arg.list, #values, MAT return.list)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rpc.Connect\n",
         "Icon": 3,
         "Index": 487,
         "Documentation": "Establishes a connection with a remote server process.",
         "Detail": "RPC.CONNECT (host, server)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Rpc.Disconnect\n",
         "Icon": 3,
         "Index": 488,
         "Documentation": "Disconnects from a remote server process.",
         "Detail": "RPC.DISCONNECT (connection.ID)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sadd\n",
         "Icon": 3,
         "Index": 489,
         "Documentation": "Adds two string numbers and returns the result as a string number.",
         "Detail": "SADD (string.number.1, string.number.2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "saveSecurityContext\n",
         "Icon": 3,
         "Index": 490,
         "Documentation": "Encrypts and saves a security context to a system security file.",
         "Detail": "saveSecurityContext(context, name, passPhrase)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Scmp",
         "Icon": 3,
         "Index": 491,
         "Documentation": "Compares two string numbers.",
         "Detail": "SCMP (string.number.1, string.number.2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sdiv ",
         "Icon": 3,
         "Index": 492,
         "Documentation": "Outputs the quotient of the whole division of two integers.",
         "Detail": "SDIV (string.number.1, string.number.2 [,precision])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Seek ",
         "Icon": 14,
         "Index": 493,
         "Documentation": "Moves the file pointer by an offset, specified in bytes, relative to the current\nposition, the beginning of the file, or the end of the file.",
         "Detail": "SEEK file.variable [, offset [, relto]] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Seek( Arg. )",
         "Icon": 3,
         "Index": 494,
         "Documentation": "Moves the command line argument pointer.",
         "Detail": "SEEK(ARG. [,arg#] ) [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Select",
         "Icon": 14,
         "Index": 495,
         "Documentation": "The SELECT statement creates a select list of elements in a specified variable for use with the READNEXT statement or to be saved in a list.",
         "Detail": "SELECT [variable] [TO list.number] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Selecte ",
         "Icon": 14,
         "Index": 497,
         "Documentation": "Assigns the contents of select list 0 to a variable.",
         "Detail": "SELECTE TO list.variable"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Selectindex \n",
         "Icon": 14,
         "Index": 498,
         "Documentation": "Creates select lists from secondary key indexes.",
         "Detail": "SELECTINDEX index [, alt.key] FROM file.variable [TO list.number]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Selectinfo \n",
         "Icon": 3,
         "Index": 499,
         "Documentation": "Returns the activity status of a select list.",
         "Detail": "SELECTINFO (list, key)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Selectn",
         "Icon": 14,
         "Index": 500,
         "Documentation": "Store a select list in a numbered select list.",
         "Detail": "SELECTN [variable] [TO list.number] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Selectv",
         "Icon": 14,
         "Index": 501,
         "Documentation": "Store a select list in a named list variable.",
         "Detail": "SELECTV [variable] TO list.variable [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Send ",
         "Icon": 14,
         "Index": 502,
         "Documentation": "Writes a block of data to a device that has been opened for I/O using OPENDEV or OPENSEQ.",
         "Detail": "SEND output [:] TO device { THEN statements [ELSE statements] | ELSE statements }"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sentence ",
         "Icon": 3,
         "Index": 503,
         "Documentation": "Returns the stored sentence that invoked the current process.",
         "Detail": "SENTENCE ()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Seq ",
         "Icon": 3,
         "Index": 504,
         "Documentation": "Converts an ASCII character code value to its corresponding numeric value.",
         "Detail": "SEQ (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Seqs ",
         "Icon": 3,
         "Index": 505,
         "Documentation": "Converts each element of a dynamic array from an ASCII character code to a\ncorresponding numeric value.",
         "Detail": "SEQS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Set Transaction Isolation Level",
         "Icon": 14,
         "Index": 506,
         "Documentation": "Sets the default transaction isolation level for your program.",
         "Detail": "SET TRANSACTION ISOLATION LEVEL level"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setAuthenticationDepth\n",
         "Icon": 3,
         "Index": 507,
         "Documentation": "Sets how deeply UniVerse should verify before deciding that a\ncertificate is not valid.",
         "Detail": "setAuthenticationDepth(context, depth, ServerOrClient)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setCipherSuite  ",
         "Icon": 3,
         "Index": 508,
         "Documentation": "Allows you to identify which cipher suites should be supported\nfor the context you specify. It affects the cipher suites and\npublic key algorithms supported during the SSL/TLS handshake and subsequent data exchanges.",
         "Detail": "setCipherSuite(context,cipherSpecs)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setClientAuthentication\n",
         "Icon": 3,
         "Index": 509,
         "Documentation": "Turns client authentication for a server socket on or off.",
         "Detail": "setClientAuthentication(context,option)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setHTTPDefault\n",
         "Icon": 3,
         "Index": 510,
         "Documentation": "Configures the default HTTP settings, including proxy server and port,\nbuffer size, authentication credential, HTTP version, and request header\nvalues.",
         "Detail": "setHTTPDefault(option, value)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setIpv",
         "Icon": 3,
         "Index": 511,
         "Documentation": "Set the default IPv connection for the whole system or for only Socket networks or UVNet",
         "Detail": "setIpv (ipvexpr[,networkexpr])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Setlocale ",
         "Icon": 3,
         "Index": 512,
         "Documentation": "Changes the setting of one or all categories for the current locale.",
         "Detail": "SETLOCALE (category, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setPrivateKey  ",
         "Icon": 3,
         "Index": 513,
         "Documentation": "Loads the private key into a security context so that it can be\nused by SSL functions. If the context already had a set private\nkey, it will be replaced.",
         "Detail": "setPrivateKey(key, format, keyLoc, passPhrase, validate, context, p12pass)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setRandomSeed  ",
         "Icon": 3,
         "Index": 514,
         "Documentation": "Generates a random seed file from a series of source files and\nsets that file as the default seed file for the security context you supply.",
         "Detail": "setRandomSeed(inFiles, outFile, length, context)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Setrem \n",
         "Icon": 14,
         "Index": 515,
         "Documentation": "Sets the position of the REMOVE pointer associated with a dynamic array.",
         "Detail": "SETREM position ON dynamic.array"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setRequestHeader\n",
         "Icon": 3,
         "Index": 516,
         "Documentation": "Enables you to set additional headers for a request.",
         "Detail": "setRequestHeader(request_handle, header_name, header_value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setSocketMap",
         "Icon": 3,
         "Index": 517,
         "Documentation": "Sets the default NLS map for either server or client sockets.",
         "Detail": "setSocketMap(mapname)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "setSocketOptions  ",
         "Icon": 3,
         "Index": 518,
         "Documentation": "Sets the current value for a socket option associated with a\nsocket of any type.",
         "Detail": "setSocketOptions(socket_handle, options)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "showSecurityContext\n",
         "Icon": 3,
         "Index": 519,
         "Documentation": "Dumps the SSL configuration parameters of a security context\ninto a readable format.",
         "Detail": "showSecurityContext(context, config)\n"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Signature ",
         "Icon": 3,
         "Index": 520,
         "Documentation": "Generates a digital signature or verifies a signature using the\nsupplied key.",
         "Detail": "SIGNATURE(algorithm, action, data, dataLoc, key, keyLoc, keyFmt, pass, sigIn, result, p12pass)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sin ",
         "Icon": 3,
         "Index": 521,
         "Documentation": "Calculates the trigonometric sine of an angle.",
         "Detail": "SIN (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sinh ",
         "Icon": 3,
         "Index": 522,
         "Documentation": "Calculates the hyperbolic sine of an expression.",
         "Detail": "SINH (expression)SINH (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sleep ",
         "Icon": 14,
         "Index": 523,
         "Documentation": "Suspends execution of a BASIC program, pausing for a specified number of\nseconds.",
         "Detail": "SLEEP [seconds]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Smul ",
         "Icon": 3,
         "Index": 524,
         "Documentation": "Multiplies two string numbers.",
         "Detail": "SMUL (string.number.1, string.number.2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPCreateRequest",
         "Icon": 3,
         "Index": 525,
         "Documentation": "Creates a SOAP request and returns a handle to the request.",
         "Detail": "SOAPCreateRequest(URL, soapAction, Request)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPCreateSecureRequest",
         "Icon": 3,
         "Index": 526,
         "Documentation": "creates a secure SOAP request and returns a handle to the request.",
         "Detail": "SOAPCreateSecureRequest(URL, soapAction, Request, security_context)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPGetDefault",
         "Icon": 3,
         "Index": 527,
         "Documentation": "Retrieves the default SOAP settings, such as the SOAP version.",
         "Detail": "SOAPGetDefault(option, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPGetFault",
         "Icon": 3,
         "Index": 528,
         "Documentation": "Parses the response data from SOAPSubmitRequest into a dynamic array of SOAP Fault components.",
         "Detail": "SOAPGetFault(respData, soapFault)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPGetResponseHeader",
         "Icon": 3,
         "Index": 529,
         "Documentation": "Gets a specific response header after issuing a SOAP request.",
         "Detail": "SOAPGetResponseHeader(Request, headerName, headerValue)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPRequestWrite",
         "Icon": 3,
         "Index": 530,
         "Documentation": "Outputs the SOAP request, in XML format, to a string or to a file.",
         "Detail": "SOAPRequestWrite(Request, reqDoc, docTypeFlag)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPSetDefault",
         "Icon": 3,
         "Index": 531,
         "Documentation": "Define default SOAP settings, such as the SOAP version. By default, the SOAP version is 1.1, although you can specify version 1.2.",
         "Detail": "SOAPSetDefault(option, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPSetParameters",
         "Icon": 3,
         "Index": 532,
         "Documentation": "Sets up the SOAP request body, specifying a remote method to call along with the method's parameter list.",
         "Detail": "SOAPSetParameters(Request, URI, serviceName, paramArray)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPSetRequestBody",
         "Icon": 3,
         "Index": 533,
         "Documentation": "Sets up a SOAP request body directly.",
         "Detail": "SOAPSetRequestBody(Request, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPSetRequestContent",
         "Icon": 3,
         "Index": 534,
         "Documentation": "Sets the entire SOAP request's content from an input string or from a file.",
         "Detail": "SOAPSetRequestContent(Request, reqDoc, docTypeFlag)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPSetRequestHeader",
         "Icon": 3,
         "Index": 535,
         "Documentation": "Sets up a SOAP request header. By default, there is no SOAP header.",
         "Detail": "SOAPSetRequestHeader(Request, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "SOAPSubmitKey",
         "Icon": 3,
         "Index": 536,
         "Documentation": "Submits a request and gets the response.",
         "Detail": "SOAPSubmitRequest(Request, timeout, respHeaders, respData, soapStatus)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Soundex ",
         "Icon": 3,
         "Index": 537,
         "Documentation": "Returns the soundex code for a string.",
         "Detail": "SOUNDEX (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Space ",
         "Icon": 3,
         "Index": 538,
         "Documentation": "Generates a string consisting of a specified number of blank spaces.",
         "Detail": "SPACE (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Spaces ",
         "Icon": 3,
         "Index": 539,
         "Documentation": "Generates a dynamic array consisting of a specified number of blank spaces for each element.",
         "Detail": "SPACES (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Splice ",
         "Icon": 3,
         "Index": 540,
         "Documentation": "Inserts a string between the concatenated values of corresponding elements of two dynamic arrays.",
         "Detail": "SPLICE (array1, expression, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sqrt ",
         "Icon": 3,
         "Index": 541,
         "Documentation": "Calculates the square root of a number.",
         "Detail": "SQRT (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Squote",
         "Icon": 3,
         "Index": 542,
         "Documentation": "The function will put single quotation mark at the beginning and end of a string.",
         "Detail": "SQUOTE(Expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sselect ",
         "Icon": 14,
         "Index": 544,
         "Documentation": "Creates a sorted list of all record IDs from a UniVerse file.",
         "Detail": "SSELECT [variable] [TO list.number] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sselectn ",
         "Icon": 14,
         "Index": 545,
         "Documentation": "Stores a selected list of record IDs in a list number.",
         "Detail": "SSELECTN [variable] [TO list.number] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sselectv ",
         "Icon": 14,
         "Index": 546,
         "Documentation": "Stores a selected list of record IDs in a list variable.",
         "Detail": "SSELECTV [variable] TO list.variable [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ssub ",
         "Icon": 3,
         "Index": 547,
         "Documentation": "Subtracts one string number from another and returns the result as a string\nnumber.",
         "Detail": "SSUB (string.number.1, string.number.2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Status ",
         "Icon": 14,
         "Index": 548,
         "Documentation": "Determines the status of a UniVerse file open for sequential processing.",
         "Detail": "STATUS dynamic.array FROM file.variable {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Status ",
         "Icon": 3,
         "Index": 549,
         "Documentation": "Reports the results of a Function or statement previously executed.",
         "Detail": "STATUS ()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Stop",
         "Icon": 3,
         "Index": 550,
         "Documentation": "The STOP statement terminates program execution and returns system control to the invoking process.",
         "Detail": "STOP [expression]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Stope ",
         "Icon": 14,
         "Index": 552,
         "Documentation": "The STOPE statement terminates program execution and returns system control to the invoking process. The ERRMSG file is used to display any message.",
         "Detail": "STOP [expression]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Stopm ",
         "Icon": 14,
         "Index": 553,
         "Documentation": "The STOPM statement terminates program execution and returns system control to the invoking process. The expression parameter is used to display any message.",
         "Detail": "STOP [expression]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Storage",
         "Icon": 14,
         "Index": 554,
         "Documentation": "The STORAGE statement performs no function. It is provided for compatibility with other Pick systems.",
         "Detail": "STORAGE arg1arg2arg3"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Str ",
         "Icon": 3,
         "Index": 555,
         "Documentation": "Generates a particular character string a specified number of times.",
         "Detail": "STR (string, repeat)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Strs ",
         "Icon": 3,
         "Index": 556,
         "Documentation": "Generates a dynamic array whose elements consist of a character string\nrepeated a specified number of times.",
         "Detail": "STRS (dynamic.array, repeat)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "submitRequest  ",
         "Icon": 3,
         "Index": 557,
         "Documentation": "Submits a request and gets a response.",
         "Detail": "submitRequest(request_handle, time_out, post_data,response_headers,response_data, http_status)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Subr ",
         "Icon": 3,
         "Index": 558,
         "Documentation": "Returns the value of an external subroutine.",
         "Detail": "SUBR (name, [argument [,argument �]] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Subroutine",
         "Icon": 3,
         "Index": 559,
         "Documentation": "The SUBROUTINE statement is used at the start of any program that will be called externally by the CALL statement. It also declares any parameters to the compiler.",
         "Detail": "SUBROUTINE [name] [([MAT] variable [, [MAT] variable �] )]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Subs ",
         "Icon": 3,
         "Index": 561,
         "Documentation": "Subtracts elements of two dynamic arrays.",
         "Detail": "SUBS (array1, array2)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Substrings ",
         "Icon": 3,
         "Index": 562,
         "Documentation": "Creates a dynamic array consisting of substrings of the elements of\nanother dynamic array.",
         "Detail": "SUBSTRINGS (dynamic.array, start, length)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Sum \n",
         "Icon": 3,
         "Index": 563,
         "Documentation": "Calculates the sum of numeric data within a dynamic array.",
         "Detail": "SUM (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Summaton \n",
         "Icon": 3,
         "Index": 564,
         "Documentation": "Adds the elements of a dynamic array.",
         "Detail": "SUMMATION (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Swap ",
         "Icon": 14,
         "Index": 565,
         "Documentation": "Interchanges the values in the variables you specify.",
         "Detail": "SWAP variable1, variable2\nSWAP MAT variable1, MAT variable2"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "System ",
         "Icon": 3,
         "Index": 566,
         "Documentation": "Checks the status of a system function.",
         "Detail": "SYSTEM (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Tabstop ",
         "Icon": 14,
         "Index": 567,
         "Documentation": "Sets the current tabstop width for PRINT statements.",
         "Detail": "TABSTOP expression"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Tan ",
         "Icon": 3,
         "Index": 568,
         "Documentation": "Calculates the trigonometric tangent of an angle.",
         "Detail": "TAN (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Tanh ",
         "Icon": 3,
         "Index": 569,
         "Documentation": "Calculates the hyperbolic tangent of an expression.",
         "Detail": "TANH (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Terminfo ",
         "Icon": 3,
         "Index": 570,
         "Documentation": "Accesses the information contained in the terminfo files.",
         "Detail": "TERMINFO (argument)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Time ",
         "Icon": 3,
         "Index": 571,
         "Documentation": "Returns the time in internal format.",
         "Detail": "TIME ()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Timedate ",
         "Icon": 3,
         "Index": 572,
         "Documentation": "Returns the time and date.",
         "Detail": "TIMEDATE ()"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Timeout ",
         "Icon": 14,
         "Index": 573,
         "Documentation": "Terminates READSEQ or READBLK if no data is read in the specified time.",
         "Detail": "TIMEOUT {file.variable | link.number}, time"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Tparm ",
         "Icon": 3,
         "Index": 574,
         "Documentation": "Evaluates a parameterized terminfo string.",
         "Detail": "TPARM (terminfo.string, [arg1], [arg2], [arg3], [arg4], [arg5], [arg6], [arg7], [arg8] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Tprint ",
         "Icon": 14,
         "Index": 575,
         "Documentation": "Sends data with delays to the screen, a line printer, or another specified print file (that is, a logical printer).",
         "Detail": "TPRINT [ON print.channel] [print.list]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trans ",
         "Icon": 3,
         "Index": 576,
         "Documentation": "Returns the contents of a field in a record of a UniVerse file.",
         "Detail": "TRANS ([DICT] filename, record.ID, field#, control.code)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Transabort",
         "Icon": 14,
         "Index": 577,
         "Documentation": "This statement is used to abort the current transaction and reverse any updates to the database.",
         "Detail": "TRANSABORT [abort-text] [THEN statement | ELSE statement]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Transaction Abort ",
         "Icon": 14,
         "Index": 578,
         "Documentation": "Discards changes made during a transaction. No changes are written to disk.",
         "Detail": "TRANSACTION ABORT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Transaction Commit ",
         "Icon": 14,
         "Index": 579,
         "Documentation": "Commits all changes made during a transaction, writing them to disk.",
         "Detail": "TRANSACTION COMMIT\n{THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Transaction Start ",
         "Icon": 14,
         "Index": 580,
         "Documentation": "Indicates the beginning of a set of statements that make up a single transaction. (PI/Open flavor)",
         "Detail": "TRANSACTION START\n{THEN statements [ELSE statements] | ELSE statements}\nTRANSACTION COMMIT\n{THEN statements [ELSE statements] | ELSE statements}\nTRANSACTION ABORT"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Transquery",
         "Icon": 14,
         "Index": 581,
         "Documentation": "This function is used to detect whether or not a transaction is active on the current process.",
         "Detail": "ROLLBACK"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Transtart",
         "Icon": 14,
         "Index": 582,
         "Documentation": "In transaction processing, this statement is used to mark the beginning of a transaction.",
         "Detail": "TRANSTART [SYNC][start-text] [THEN statement | ELSE statement]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trim",
         "Icon": 3,
         "Index": 583,
         "Documentation": "Use the TRIM function to remove unwanted characters in expression",
         "Detail": "TRIM (expression [,character [,option]] )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trimb ",
         "Icon": 3,
         "Index": 586,
         "Documentation": "Deletes all blank spaces and tabs after the last nonblank character in an expression.",
         "Detail": "TRIMB (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trimbs ",
         "Icon": 3,
         "Index": 587,
         "Documentation": "Deletes all trailing blank spaces and tabs from each element of a dynamic\narray.",
         "Detail": "TRIMBS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trimf",
         "Icon": 3,
         "Index": 588,
         "Documentation": "Deletes all blank spaces and tabs up to the first nonblank character in an\nexpression.",
         "Detail": "TRIMF(expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trimfs ",
         "Icon": 3,
         "Index": 590,
         "Documentation": "Deletes all leading blank spaces and tabs from each element of a dynamic array.",
         "Detail": "TRIMFS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Trims ",
         "Icon": 3,
         "Index": 591,
         "Documentation": "Deletes extra blank spaces and tabs from the elements of a dynamic array.",
         "Detail": "TRIMS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ttyctl",
         "Icon": 14,
         "Index": 592,
         "Documentation": "Controls sequential file interaction with a terminal device.",
         "Detail": ""
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ttyget",
         "Icon": 14,
         "Index": 593,
         "Documentation": "Gets a dynamic array of the terminal characteristics of a terminal, line\nprinter channel, or magnetic tape channel.",
         "Detail": "TTYGET variable [FROM {file.variable | LPTR [n] | MTU [n] }] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Ttyset",
         "Icon": 14,
         "Index": 594,
         "Documentation": "Sets the terminal characteristics of a terminal, line printer channel, or magnetic tape channel.",
         "Detail": "TTYSET dynamic.array [ON {file.variable | LPTR [n] | MTU [n] }] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArrayAppendItem",
         "Icon": 3,
         "Index": 595,
         "Documentation": "Appends the item you specify to the UDO array.",
         "Detail": "UDOArrayAppendItem(udoHandle, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArrayDeleteItem",
         "Icon": 3,
         "Index": 596,
         "Documentation": "Deletes the array item you specify from the index.",
         "Detail": "UDOArrayDeleteItem(udoHandle,index)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArrayGetItem",
         "Icon": 3,
         "Index": 597,
         "Documentation": "Returns the UDO array item by its index.",
         "Detail": "UDOArrayGetItem(udoHandle, index, value[out], value_type[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArrayGetNextItem",
         "Icon": 3,
         "Index": 598,
         "Documentation": "returns the next UDO array item relative to the current position, which is the position of the array the last time it was accessed by this function. The initial position is 1.",
         "Detail": "UDOArrayGetNextItem(udoHandle, value[out], type[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArrayGetSize",
         "Icon": 3,
         "Index": 599,
         "Documentation": "Gets the size of the UDO array.",
         "Detail": "UDOArrayGetNextItem(udoHandle, value[out], type[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArrayInsertItem",
         "Icon": 3,
         "Index": 600,
         "Documentation": "Inserts a UDO array element at the position you specify by index.",
         "Detail": "UDOArrayInsertItem(udoHandle, index, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOArraySetItem",
         "Icon": 3,
         "Index": 601,
         "Documentation": "Sets or inserts a UDO array element at the position you specify.",
         "Detail": "UDOArraySetItem(udoHandle, index, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOClone",
         "Icon": 3,
         "Index": 602,
         "Documentation": "Clones a UDO object or array so that changes to the new object or array will not affect the original object.",
         "Detail": "UDOClone(udoHandle, newUdoHandle[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOCreate",
         "Icon": 3,
         "Index": 603,
         "Documentation": "Creates a UDO item of the type you specify.",
         "Detail": "UDOCreate(udoType, udoHandle[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDODelete",
         "Icon": 3,
         "Index": 604,
         "Documentation": "Deletes a property from the UDO object.",
         "Detail": "UDODeleteProperty(udoHandle, name)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOFree",
         "Icon": 3,
         "Index": 605,
         "Documentation": "Forcefully removes a UDO object or array from memory.",
         "Detail": "UDOFree(udoHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOGetLastError",
         "Icon": 3,
         "Index": 606,
         "Documentation": "Return the last error code and error message.",
         "Detail": "UDOGetLastError(errorCode[out], errorMessage[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOGetNextProperty",
         "Icon": 3,
         "Index": 607,
         "Documentation": "Provides a convenient way to walk through all the properties in a UDO object, without needing to know the property names in advance.",
         "Detail": "UDOGetNextProperty(udoHandle, name[out], value[out], value_type[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOGetOption",
         "Icon": 3,
         "Index": 608,
         "Documentation": "Gets the value of a UDO option.",
         "Detail": "UDOGetOption(option, value[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOGetProperty",
         "Icon": 3,
         "Index": 609,
         "Documentation": "Returns the value and type of the UDO object.",
         "Detail": "UDOGetProperty(udoHandle, name, value[out], value_type[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOGetPropertyNames",
         "Icon": 3,
         "Index": 610,
         "Documentation": "Returns a UDO array that holds the names of all the properties in the UDO object.",
         "Detail": "UDOGetPropertyNames(udoHandle, udoArray[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOGetType",
         "Icon": 3,
         "Index": 611,
         "Documentation": "Gets the UDO value type of a UniVerse BASIC variable.",
         "Detail": "UDOGetType(udoHandle, type[out)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOIsTypeOf",
         "Icon": 3,
         "Index": 612,
         "Documentation": "Test the UDO value type of a UniVerse BASIC variable.",
         "Detail": "UDOIsTypeOf(udoHandle, type)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDORead",
         "Icon": 3,
         "Index": 613,
         "Documentation": "Creates a UDO object from a JSON string or XML string.",
         "Detail": "UDORead(inputString, inputType, udoHandle[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOSetOption",
         "Icon": 3,
         "Index": 614,
         "Documentation": "Sets the options for the UDO API.",
         "Detail": "UDOSetOption(option, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOSetProperty",
         "Icon": 3,
         "Index": 615,
         "Documentation": "Creates or updates a property on a UDO object.",
         "Detail": "UDOSetOption(option, value)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "UDOWrite",
         "Icon": 3,
         "Index": 616,
         "Documentation": "Writes a UDO object in JSON or XML format.",
         "Detail": "UDOWrite(udoHandle, outputType, outputString[out])"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Unassigned",
         "Icon": 3,
         "Index": 617,
         "Documentation": "The UNASSIGNED function allows a program to determine whether a variable has been assigned a value.",
         "Detail": "UNASSIGNED(variable)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Unichar ",
         "Icon": 3,
         "Index": 619,
         "Documentation": "Generates a character from a Unicode integer value.",
         "Detail": "UNICHAR (unicode)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Unichars ",
         "Icon": 3,
         "Index": 620,
         "Documentation": "Generates a dynamic array from an array of Unicode values.",
         "Detail": "UNICHARS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Uniseq ",
         "Icon": 3,
         "Index": 621,
         "Documentation": "Generates a Unicode integer value from a character.",
         "Detail": "UNISEQ (expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Uniseqs ",
         "Icon": 3,
         "Index": 622,
         "Documentation": "Generates an array of Unicode values from a dynamic array.",
         "Detail": "UNISEQS (dynamic.array)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Unlock ",
         "Icon": 14,
         "Index": 623,
         "Documentation": "Releases an execution lock that was set with the LOCK statement.",
         "Detail": "UNLOCK [expression]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Until",
         "Icon": 14,
         "Index": 624,
         "Documentation": "The UNTIL statement terminates a FOR or LOOP loop when the specified expression is true. The optional DO is required in a LOOP",
         "Detail": "UNTIL expr [DO]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Upcase",
         "Icon": 3,
         "Index": 626,
         "Documentation": "UPCASE converts all lowercase characters in an expression to uppercase characters.",
         "Detail": "UPCASE(expression)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Uprint ",
         "Icon": 14,
         "Index": 628,
         "Documentation": "Prints data without performing any mapping. Typically used with data that\nhas already been mapped using OCONV (mapname).",
         "Detail": "UPRINT [ON print.channel] [print.list ]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Userinfo ",
         "Icon": 3,
         "Index": 629,
         "Documentation": "Gets the PID, user number and more for the PID or user number specified.",
         "Detail": "USERINFO (code, value, userinfo)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Weof ",
         "Icon": 3,
         "Index": 630,
         "Documentation": "Writes an end-of-file mark to a magnetic tape.",
         "Detail": "WEOF [UNIT (mtu)] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Weofseq ",
         "Icon": 14,
         "Index": 631,
         "Documentation": "Writes an end-of-file mark to a UniVerse file open for sequential processing\nat the current position.",
         "Detail": "WEOFSEQfile.variable [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "While",
         "Icon": 14,
         "Index": 632,
         "Documentation": "The WHILE statement terminates a FOR or LOOP loop when the specified expression is true. The optional DO is required in a LOOP",
         "Detail": "WHILE expr [DO]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Write",
         "Icon": 14,
         "Index": 634,
         "Documentation": "The WRITE statement allows a program to write a record into a previously opened file.",
         "Detail": "WRITE expression {ON | TO} [file.variable,] record.ID [ON ERROR statements] [LOCKED statements] [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writeblk ",
         "Icon": 14,
         "Index": 636,
         "Documentation": "Writes a block of data to a record in a sequential file.",
         "Detail": "WRITEBLK expression ON file.variable {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writelist ",
         "Icon": 14,
         "Index": 637,
         "Documentation": "Saves a list as a record in the &SAVEDLISTS& file.",
         "Detail": "WRITELIST dynamic.array ON listname"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writeseq ",
         "Icon": 14,
         "Index": 638,
         "Documentation": "Writes new values to the specified record of a UniVerse file sequentially.",
         "Detail": "WRITESEQ expression {ON | TO} file.variable [ON ERROR statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writeseqf ",
         "Icon": 14,
         "Index": 639,
         "Documentation": "Writes new values to the specified record of a UniVerse file sequentially and ensures that the data is written to disk.",
         "Detail": "WRITESEQF expression {ON | TO} file.variable [ON ERROR statements] {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "writeSocket  ",
         "Icon": 3,
         "Index": 640,
         "Documentation": "Writes data to a socket connection.",
         "Detail": "writeSocket(socket_handle, socket_data, time_out, mode, actual_write_size)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writet",
         "Icon": 3,
         "Index": 641,
         "Documentation": "Writes the contents of a record onto magnetic tape.",
         "Detail": "WRITET [UNIT (mtu)] variable {THEN statements [ELSE statements] | ELSE statements}"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writeu",
         "Icon": 14,
         "Index": 642,
         "Documentation": "The WRITEU statement allows a program to write a record into a previously opened file. An existing record lock will be preserved.",
         "Detail": "WRITEU variable1 ON|TO [ variable2,] expression [SETTING setvar] [ON ERROR statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writev",
         "Icon": 14,
         "Index": 644,
         "Documentation": "TThe WRITEV statement allows a program to write a specific field of a record in a previously opened file.",
         "Detail": "WRITEV expression {ON | TO} [file.variable,] record.ID, field# [ON ERROR statements] [LOCKED statements] [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Writevu \n",
         "Icon": 14,
         "Index": 646,
         "Documentation": "Replaces the contents of a field in the record without releasing the record lock.",
         "Detail": "WRITEVU expression {ON | TO} [file.variable,] record.ID, field# [ON ERROR statements] [LOCKED statements] [THEN statements] [ELSE statements]"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMAddChild",
         "Icon": 3,
         "Index": 647,
         "Documentation": "Inserts a node as the last child of the found node. I",
         "Detail": "XDOMAddChild(xmlHandle, xpathString, nsMap, nodeHandle,\ndupFlag,nodeType)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMAppend",
         "Icon": 3,
         "Index": 648,
         "Documentation": "Finds the xpathString in the context xmlHandle in the DOM structure, and inserts nodeHandle into the DOM structure as the next sibling of the found node. If the inserted node type is XDOM.ATTR.NODE, this node is inserted as an attribute.",
         "Detail": "XDOMAppend(xmlHandle, xpathString, nsMap, nodeHandle, dupFlag)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMClone",
         "Icon": 3,
         "Index": 649,
         "Documentation": "Duplicates the DOM subtree specified by xmlHandle to a new subtree newXmlHandle. ",
         "Detail": "XDOMClone(xmlHandle, newXmlHandle, depth)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMClose",
         "Icon": 3,
         "Index": 650,
         "Documentation": "Frees the DOM structure.",
         "Detail": "XDOMClose(domHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMCreateNode",
         "Icon": 3,
         "Index": 651,
         "Documentation": "Creates a new node in the DOM structure.",
         "Detail": "XDOMCreateNode(xmlHandle, nodeName, nodeValue, nodeType, nodeHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMCreateRoot",
         "Icon": 3,
         "Index": 652,
         "Documentation": "Creates a new DOM structure with root only.",
         "Detail": "XDOMCreateRoot(domHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMEvaluate",
         "Icon": 3,
         "Index": 653,
         "Documentation": "Returns the value of xpathString in the context xmlHandle in the DOM structure.",
         "Detail": "XDOMEvaluate(xmlHandle, xpathString, nsMap, aValue)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetAttribute",
         "Icon": 3,
         "Index": 654,
         "Documentation": "Gets the node's attribute node, whose attribute name is attrName.",
         "Detail": "XDOMGetAttribute(nodeHandle, attrName, nodeHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetChildNodes",
         "Icon": 3,
         "Index": 655,
         "Documentation": "Returns all child nodes of xmlHandle.",
         "Detail": "XDOMGetChildNodes(xmlHandle, nodeListHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetElementByld",
         "Icon": 3,
         "Index": 656,
         "Documentation": "Finds the first element with the ID you specify.",
         "Detail": "XDOMGetElementById(xmlHandle,idstr,nodeHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetElementsByName",
         "Icon": 3,
         "Index": 657,
         "Documentation": "Tries to find all elements with the name you specify.",
         "Detail": "XDOMGetElementsByName(xmlHandle, namestr, nodeListHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetElementsByTag",
         "Icon": 3,
         "Index": 658,
         "Documentation": "Tries to find all elements with the tag name you specify.",
         "Detail": "XDOMGetElementsByTag(xmlHandle, tagname, nodeListHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetNodeName",
         "Icon": 3,
         "Index": 659,
         "Documentation": "Returns the node name.",
         "Detail": "XDOMGetNodeName(nodeHandle, nodeName)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetNodeType",
         "Icon": 3,
         "Index": 660,
         "Documentation": "Returns the node type.",
         "Detail": "XDOMGetNodeType(nodeHandle, nodeType)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetNodeValue",
         "Icon": 3,
         "Index": 661,
         "Documentation": "Gets the node value.",
         "Detail": "XDOMGetNodeValue(nodeHandle, nodeValue)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetOwnerDocument",
         "Icon": 3,
         "Index": 662,
         "Documentation": "Returns the DOM handle to which nodeHandle belongs.",
         "Detail": "XDOMGetOwnerDocument(nodeHandle, domHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMGetUserData",
         "Icon": 3,
         "Index": 663,
         "Documentation": "Returns the user data associated with the node.",
         "Detail": "XDOMGetUserData(nodeHandle, userData)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMItem",
         "Icon": 3,
         "Index": 664,
         "Documentation": "Returns the index-th item in the list.",
         "Detail": "XDOMItem(nodeListHandle, index, dataHandle, dataType)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMLength",
         "Icon": 3,
         "Index": 665,
         "Documentation": "Determines the number of nodes in the list. The range of the valid child node index is to 1 to length, inclusive.",
         "Detail": "XDOMLength(nodeListHandle, length)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMLocate",
         "Icon": 3,
         "Index": 666,
         "Documentation": "Finds a starting point for relative XPath searching in context xmlHandle in the DOM structure. ",
         "Detail": "XDOMLocate(xmlHandle, xpathString, nsMap, nodeHandle )"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMLocateNode",
         "Icon": 3,
         "Index": 667,
         "Documentation": "Traverses from nodeHandle and gets the next node according to direction and childIndex.",
         "Detail": "XDOMLocateNode(nodeHandle, direction, childIndex, nodeType, newNodeHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMOpen",
         "Icon": 3,
         "Index": 668,
         "Documentation": "Reads an xmlDocument and creates DOM structure. If the DTD is included in the document, UniVerse validates the document. The xmlDocument can be from a string, or from a file, depending on the docLocation flag.",
         "Detail": "XDOMOpen(xmlDocument, docLocation, domHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMQuery",
         "Icon": 3,
         "Index": 669,
         "Documentation": "Runs xquery on the current document or document node you specify with xmlHandle.",
         "Detail": "XDOMQuery(xmlHandle, xquery, xqueryLocation, itemListHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMRemove",
         "Icon": 3,
         "Index": 670,
         "Documentation": "Finds the xpathString in the context xmlHandle in the DOM structure, and then removes the found node or its attribute with name attrName.",
         "Detail": "XDOMRemove(xmlHandle, xpathString, nsMap, attrName, nodeHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMReplace",
         "Icon": 3,
         "Index": 671,
         "Documentation": "Finds the xpathString in the context xmlHandle in the DOM structure, and replaces the found node with nodeHandle.",
         "Detail": "XDOMReplace(xmlHandle, xpathString, nsMap, nodeHandle, dupFlag)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMSetNodeValue",
         "Icon": 3,
         "Index": 672,
         "Documentation": "Sets the node value.",
         "Detail": "XDOMSetNodeValue(nodeHandle, nodeValue)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMSetUserData",
         "Icon": 3,
         "Index": 673,
         "Documentation": "Sets the user data associated with the node.",
         "Detail": "XDOMSetUserData(nodeHandle, userData)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMTransform",
         "Icon": 3,
         "Index": 674,
         "Documentation": "Transforms input DOM structure using the style sheet specified by styleSheet to output DOM structure.",
         "Detail": "XDOMTransform(domHandle, styleSheet, ssLocation, outDomHandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMValidate",
         "Icon": 3,
         "Index": 675,
         "Documentation": "Validates the DOM document using the schema specified by schFile.",
         "Detail": "XDOMValidate(xmlDocument, docLocation, schFile, schLocation)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XDOMWrite",
         "Icon": 3,
         "Index": 676,
         "Documentation": "Writes the DOM structure to xmlDocument. xmlDocument can be a string or a file, depending on the value of the docLocation flag.",
         "Detail": "XDOMWrite(domHandle, xmlDocument, docLocation)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "Xlat   ",
         "Icon": 3,
         "Index": 677,
         "Documentation": "Returns the contents of a field in a record of a UniVerse file.",
         "Detail": "XLATE ([DICT] filename, record.ID, field#, control.code)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMAPAppendRec",
         "Icon": 3,
         "Index": 678,
         "Documentation": "Formats the specified record from the UniVerse file as a U2XMAP dataset record and appends it to the U2XMAP dataset.",
         "Detail": "XMAPAppendRec(XMAPhandle, file_name, record)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMAPClose",
         "Icon": 3,
         "Index": 679,
         "Documentation": "Closes the U2XMAP dataset handle and frees all related structures and\nmemory.",
         "Detail": "XMAPClose(XMAP_handle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMAPCreate",
         "Icon": 3,
         "Index": 680,
         "Documentation": "Creates an empty XML document for transferring data from the UniVerse database to XML according the mapping rules you define.",
         "Detail": "XMAPCreate(u2xmapping_rules, mapping_flag, XMAPhandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMAPOpen",
         "Icon": 3,
         "Index": 681,
         "Documentation": "Opens an XML document as a U2XMAP data set.",
         "Detail": "XMAPOpen(xml_document, doc_flag, u2xmapping_rules, u2xmap_flag, XMAPhandle)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMAPReadNext",
         "Icon": 3,
         "Index": 682,
         "Documentation": "etrieves the next record from the U2XMAP dataset and formats it as a record of the UniVerse file that is being mapped.",
         "Detail": "XMAPReadNext(XMAPhandle, file_name, record)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMAPToXMLDoc",
         "Icon": 3,
         "Index": 683,
         "Documentation": "Generates an XML document from the data in the U2XMAP dataset using the mapping rules you define.",
         "Detail": "XMAPToXMLDoc(XMAPhandle, xmlfile, doc_flag)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMLError",
         "Icon": 3,
         "Index": 684,
         "Documentation": "Get the last error message.",
         "Detail": "XMLError(errmsg)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMLError  ",
         "Icon": 14,
         "Index": 685,
         "Documentation": "Gets the last error message when using XML documents.",
         "Detail": "XMLError"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMLExecute",
         "Icon": 3,
         "Index": 686,
         "Documentation": "Enables you to create an XML document using the RetrieVe LIST statement or the UniVerse SQL SELECT statement from a UniVerse BASIC program.",
         "Detail": "XMLExecute(cmd, options, xmlvar, xsdvar)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMLGetError",
         "Icon": 3,
         "Index": 687,
         "Documentation": "Returns the error code and error message after the previous XML API failed.",
         "Detail": "XMLGetError(errorCode, errorMessage)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XMLTODB",
         "Icon": 3,
         "Index": 688,
         "Documentation": "Populate the UniVerse database.",
         "Detail": "XMLTODB(xml_document, doc_flag, u2xmapping_rules, u2xmap_ flag, status)"
      },
      {
         "Type": "UniVerse Basic",
         "Keywords": "XTD  ",
         "Icon": 3,
         "Index": 689,
         "Documentation": "Convert a string of hexadecimal characters to an integer. ",
         "Detail": "XTD (string)"
      }
   ]
}